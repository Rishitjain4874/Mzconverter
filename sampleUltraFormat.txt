//import RIL_SPECTRUM.ULF_Spectrum_Common;

//Header part
external File_Header_Ext{
    Filename filename;
    CreationTime creationTime;
    DctID fctID;
    DctVer dctVer;
    DctDef dctDef;
};

external Filename : identified_by(tag == "FILENAME") {
   ascii tag :  terminated_by("="), encode_value("FILENAME"), external_only;
   ascii value : terminated_by(0xA);
};

external CreationTime : identified_by(tag == "CREATION_TIME") {
    ascii tag :  terminated_by("="), encode_value("CREATION_TIME"), external_only;
    ascii value : terminated_by(0xA);
};


external DctDefValue  {
    ascii CDR_TYPE : terminated_by("&");
    ascii DCT_NAME : terminated_by(":");
    ascii HAS_FILEHDR : terminated_by(":");
    ascii HAS_FILETRAILER : terminated_by(":");
    ascii HAS_RECHDR : terminated_by(":");
    ascii HAS_FIELDLABEL : terminated_by(":");
    ascii DELIMITERS : terminated_by(":");
    ascii ENUM_FMTTYPE : terminated_by(":");
    ascii FMT_METHOD : terminated_by(":");
    ascii trailingBytes :  terminated_by(0xA);
    --Column names not decoded, ignored...
};
external Rishit_jain  {
    ascii CDR_TYPE : terminated_by(":");
    ascii DCT_NAME : terminated_by(":");
    ascii HAS_FILEHDR : terminated_by(":");
    ascii HAS_FILETRAILER : terminated_by(":");
    ascii HAS_RECHDR : terminated_by(":");
    ascii HAS_FIELDLABEL : terminated_by(":");
    ascii DELIMITERS : terminated_by(":");
    ascii ENUM_FMTTYPE : terminated_by(":");
    ascii FMT_METHOD : terminated_by(":");
    ascii trailingBytes :  terminated_by(0xA);
    --Column names not decoded, ignored...
}
//End of Header part

//VCDR starts
external errorBlock : identified_by(strStartsWith(errorCode, "DRP")) {
    ascii errorCode : terminated_by(",");
    ascii errorMessage : terminated_by(",");
};

external VCDR {
    set {
        errorBlock error : optional;
    };    
    VCDR_Ext vcdr;
};
external VCDR_Ext{
    ascii CDRSequenceNumber : terminated_by(","),long(base2);
    ascii CDRMajorVersion : terminated_by(","),int(base10);
    ascii CDRMinorVersion : terminated_by(","),int(base10);
    ascii LongCallDurationIndicator: terminated_by(","),int(base10);
};
//VCDR starts

//Trailer part starts
external File_Trailer_Ext{

    CloseTime closeTime;
    SeqnumFirst seqnumFirst;
    SeqnumLast seqnumLast;
    RecordCount recordCount;
    ascii Checksum : terminated_by(0xA);
};

external CloseTime : identified_by(tag=="CLOSE_TIME") {
    ascii tag :  terminated_by("="), encode_value("CLOSE_TIME"), external_only;
    ascii value : terminated_by(0xA);
};


external SeqnumFirst : identified_by(tag=="SEQNUM_FIRST") {
    ascii tag :  terminated_by("="), encode_value("SEQNUM_FIRST"), external_only;
    ascii value : terminated_by(0xA);
};

external SeqnumLast : identified_by(tag=="SEQNUM_LAST") {
    ascii tag :  terminated_by("="), encode_value("SEQNUM_LAST"), external_only;
    ascii value : terminated_by(0xA);
};

external RecordCount : identified_by(tag=="RECORD_COUNT") {
    ascii tag :  terminated_by("="), encode_value("RECORD_COUNT"), external_only;
    ascii value : terminated_by(0xA);
};

//Trailer ends

in_map Header_inMap : external(File_Header_Ext), target_internal(file_header_TI), discard_output {automatic;};

decoder header_decoder : in_map(Header_inMap);

in_map Trailer_inMap : external(File_Trailer_Ext), target_internal(file_trailer_TI), discard_output {automatic;};

decoder trailer_decoder : in_map(Trailer_inMap);

//Final decoder n encoder for VCDR

in_map VCDR_im : external(VCDR), target_internal(VCDR_TI) {
    automatic : use_external_names;
};


decoder VCDR_Dec : in_map(VCDR_im);
encoder VCDR_Enc : out_map(VCDR_om);


//decoder VCDR_ASCII_Decoder : in_map(Header_inMap), in_map(VCDR_im), in_map(Trailer_inMap);

decoder VCDR_ASCII_Decoder {
decoder header_decoder;
decoder VCDR_Dec *;
decoder trailer_decoder;
};

//Decoding and encoding part of VCDR ends



//Intec record starts
external inContentFormat_GenBand {

    ascii incomingSwitch         : align(left), padded_with(0x20), static_size(20);
    ascii outgoingSwitch         : align(left), padded_with(0x20), static_size(20);
    ascii eventStartDate         : align(left), padded_with(0x20), static_size(8);
    ascii eventStartTime         : align(left), padded_with(0x20), static_size(8);
    ascii eventDuration          : align(right), padded_with("0"), static_size(10);
    ascii aNum                   : align(left), padded_with(0x20), static_size(28); //, int(base10);
    ascii bNum                   : align(left), padded_with(0x20), static_size(28); //, int(base10);
    ascii incomingTrunk          : align(left), padded_with(0x20), static_size(20);
    ascii outgoingTrunk          : align(left), padded_with(0x20), static_size(20);
    ascii incomingProduct        : align(left), padded_with(0x20), static_size(14); 
    ascii outgoingProduct        : align(left), padded_with(0x20), static_size(14);
    ascii eventDirection         : align(left), padded_with(0x20), static_size(1);
    ascii discreteRatingParam_1  : align(left), padded_with(0x20), static_size(15); 
    //ascii discreteRatingParam_2  : static_size(15);
    //ascii discreteRatingParam_3  : static_size(15);
    ascii dataUnit               : align(left), padded_with(0x20), static_size(8);
    ascii recSeqNum              : long(base10), align(left), padded_with(0x20), static_size(40);
    ascii recType                : align(left), padded_with(0x20), static_size(2); 
    ascii userSummarization      : align(left), padded_with(0x20), static_size(20);
    ascii userData               : align(left), padded_with(0x20), static_size(30);
    ascii userData_2             : align(left), padded_with(0x20), static_size(30);
    ascii linkField              : align(left), padded_with(0x20), static_size(2);// Added new field for Idenfication of splited record @Build 5    
    ascii userData_3             : align(left), padded_with(0x20), static_size(80); //Added for mapping ICID on 20170807
    ascii lineFeed               : terminated_by(0xA), external_only;
};




in_map contentGenBand_imap : external(inContentFormat_GenBand), target_internal(inContentFormatGenBand_TI){automatic;};

decoder inContentFormatGenBand_Dec : in_map(contentGenBand_imap);

out_map contentGenBand_OutMap : internal(inContentFormatGenBand_TI),external(inContentFormat_GenBand) { 
    automatic;
};

encoder contentGenBand_Enc : out_map(contentGenBand_OutMap);

//Intec record ends


//Internal CDR used for mapping and businessLogic
internal passingInt {
    string eventDateTime;
    long eventDuration;
    string callingPartyNum;
    string calledPartyNum;
    string origTrunkGrpCLLI;
    string termTrunkGrpCLLI;
    int origTrunkGrp;
    int termTrunkGrp;
    string switchID;
    int noaCallingParty;
    int noaCalledParty;
    long longDurCallInd;
    long callId;
    long eventStartDateTime; //for duplicate record check
    string disconnectDateTime;
    int bearerCapability;
    string pointCode;
    int answerType;
    int orignMSF;
    int termMSF;
    int recordSeqNum;
    string longCallTime;
    string inRecordType; // added for audit framework.
    string outRecordType; // added for audit framework.
    int origLineOrTrunkType;
    int termLineOrTrunkType;
    date eventDate;
    string originatingTGRP;
    long dupEventStartDateTime; // added for new duplicate record check on 20160812
    string outplusedCallingNum; //Added field for capturing New field Outplused Calling Number 20170601
    string chargingIndicator;  //Added for mapping ICID on 20170807
    string userSummarization;
    boolean booVoWifi;
    boolean booVoLTE;
    VCDR_Ext mgcfUdr;
};


//Session UDR for Aggregation
session genBand_LongCall {
    long totalCallDur;
    date origDateTime;
    boolean missingPartial;
    boolean startPartialReceived;
    boolean lastPartialReceived;
    map<date, date> timeMap;
    passingInt udr;
};

//Session UDR for Aggregation
session genBand_LongCall_Cum {
    long totalCallDur;
    date origDateTime;
    boolean missingPartial;
    long lastPartialDuration;
    map<long, date> timeMap;
    passingInt udr;
};
//Added for Spectrum @Build 0.5
/*
external inContentFormat_GenBand_Spectrum : identified_by (recordType == "MGCF_Record"){
    ascii recordType : terminated_by(",");
    ascii eventEndDate : terminated_by(",");
    ascii eventEndTime : terminated_by(",");
    inContentFormat_GenBand mgcfRecord;

};

in_map contentGenBand_imap_spectrum : external(inContentFormat_GenBand_Spectrum),  internal(errorTI), target_internal(inContentFormatGenBand_spectrum_TI){
    automatic  {
        inContentFormat_GenBand : using in_map contentGenBand_imap;
    };
};


decoder inContentFormatGenBand_sptrm_Dec : in_map(contentGenBand_imap_spectrum);

out_map contentGenBand_sptrm_OutMap : internal(inContentFormatGenBand_spectrum_TI),external(inContentFormat_GenBand_Spectrum) { 
    automatic;
};

encoder contentGenBand_sptrm_Enc : out_map(contentGenBand_sptrm_OutMap);
//Changes for Build 0.5 ends here.
*/

//Changes for NPO Server data by Abhinay 20150710
external NPO_Reporting {
    ascii OriginatingDateTime   : terminated_by(",");
    ascii AnswerDateTime        : terminated_by(",");
    ascii DisconnectDateTime    : terminated_by(",");
    ascii CallingPartyID        : terminated_by(",");
    ascii DialedNumber          : terminated_by(",");
    ascii CalledPartyID         : terminated_by(",");
    ascii TranslatedNumber      : terminated_by(",");
    ascii CallID                : terminated_by(","),long(base10);
    ascii InternalReleaseCause  : terminated_by(","),int(base10);
    ascii OrigSignalRelCause    : terminated_by(","),long(base10);
    ascii TermInternalRelCause  : terminated_by(","),int(base10);
    ascii TermSignalRelCause    : terminated_by(","),int(base10);
    ascii DisconnectDirection   : terminated_by(",");
    ascii OriginatingMG         : terminated_by(","),int(base10);
    ascii OriginatingChannel    : terminated_by(","),int(base10);
    ascii OrigTrunkGroup        : terminated_by(","),int(base10);
    ascii OrigTrunkGroupCircuitID : terminated_by(","),int(base10);
    ascii TermLineorTrunkType   : terminated_by(","),int(base10);
    ascii TerminatingMG         : terminated_by(","),int(base10);
    ascii TerminatingChannel    : terminated_by(","),int(base10);
    ascii TermTrunkGroup        : terminated_by(","),int(base10);
    ascii TermTrunkGroupCircuitID : terminated_by(","),int(base10);
    ascii CallTypeTollFree      : terminated_by(","),int(base10);
    ascii OriginationLATA       : terminated_by(","),int(base10);
    ascii CallerNumberPortedID  : terminated_by(",");
    ascii CalledNumberPortedID  : terminated_by(",");
    ascii OriginationLRN        : terminated_by(",");
    ascii OrigLRNSource         : terminated_by(",");
    ascii TerminationLRN        : terminated_by(",");
    ascii TermLRNSource         : terminated_by(",");
    ascii LNPDipIndication      : terminated_by(",");
    ascii OrigCountryCode       : terminated_by(","),int(base10);
    ascii CallDuration          : terminated_by(","),long(base10);
    ascii OrigTrunkGroupCLLI    : terminated_by(",");
    ascii TermTrunkGroupCLLI    : terminated_by(",");
    ascii OrigSIPCallID         : terminated_by(",");
    ascii TermSIPCallID         : terminated_by(",");
    ascii OriginatingTGRP       : terminated_by(0xA);
};

in_map NPO_Reporting_imap : external(NPO_Reporting), target_internal(NPO_Reporting_TI){automatic;};

decoder NPO_Reporting_Dec : in_map(NPO_Reporting_imap);

out_map NPO_Reporting_OutMap : internal(NPO_Reporting_TI),external(NPO_Reporting) { 
    automatic;
};

encoder NPO_Reporting_Enc : out_map(NPO_Reporting_OutMap);

internal SourceFileNm {
    string sourceFileName;    
};

