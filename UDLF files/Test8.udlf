external BTAS_V101   :   identified_by(cdrVerNb=="1.0.1"){
   // set {
     //   ErrorBlockBTAS err : optional;
    //};    
	ascii cdrGenNb                     : int(base10),terminated_by(0x2C);
	ascii cdrVerNb                     : terminated_by(0x2C);
	ascii siteName                     : terminated_by(0x2C);
	ascii origCalledNb                 : terminated_by(0x2C);
	ascii modifCalledNb                : terminated_by(0x2C);
	ascii origCallingNb                : terminated_by(0x2C);
	ascii modifCallingNb               : terminated_by(0x2C);
	ascii callInitTime                 : terminated_by(0x2C);
	ascii callStartTime                : terminated_by(0x2C);
	ascii callEndTime                  : terminated_by(0x2C);
	ascii callChargeableDur            : int(base10), terminated_by(0x2C);
	ascii callAnsweredStatus           : terminated_by(0x2C);
	ascii callDisconnectSrc            : terminated_by(0x2C);
	ascii networkCallDisconnectReasonHeader : terminated_by(0x2C);
	ascii intCallDisconnectReasonCode  : terminated_by(0x2C);
	ascii networkCallDisconnectCause   : terminated_by(0x2C);
	ascii servedCallLeg                : terminated_by(0x2C);
	ascii imsICID                      : terminated_by(0x2C);
	ascii imsCallID                    : terminated_by(0x2C);
	ascii pServedUser                  : terminated_by(0x2C);
	ascii roSessionId                  : terminated_by(0x2C);
	ascii negotiatedMedia1             : terminated_by(0x2C);
	ascii negotiatedMedia2             : terminated_by(0x2C);
	ascii clearCode                    : terminated_by(0x2C);
	ascii longCallCdrInd               : int(base10), terminated_by(0x2C);
	ascii pVisitedNetworkId            : terminated_by(0x2C);
	ascii pAccessNetworkInfo           : terminated_by(0x2C);
	ascii nbPortabilityRouteInfo       : terminated_by(0x2C);
	ascii enterpriseId                 : terminated_by(0x2C);
	ascii cugId                        : terminated_by(0x2C);
	ascii cugType                      : int(base10), terminated_by(0x2C);
	ascii reqUriTgrpId                 : terminated_by(0x2C);
	ascii contactHeaderTgrpId          : terminated_by(0x2C);
	ascii callFwdIndicator             : int(base10), terminated_by(0x2C);
	ascii callFwdType                  : int(base10), terminated_by(0x2C);
	ascii callFwdAssociatedPartyAddr   : terminated_by(0x2C);
	ascii nbOfCallFwdDiversions        : terminated_by(0x2C);
	ascii confIndicator                : terminated_by(0x2C);
	ascii confCorrId                   : terminated_by(0x2C);
	ascii onNetOffNetCallInd           : terminated_by(0xA);
};


in_map BTAS_Error_InMap : external (ErrorBlockBTAS), target_internal(ErrorBlockBTAS){automatic;};
in_map BTAS_V101_InMap : external (BTAS_V101), internal(BTAS_UDR){
    automatic {
        ErrorBlockBTAS : using in_map BTAS_Error_InMap;
    };
};

out_map BTAS_V101_OutMap : external (BTAS_V101), internal(BTAS_UDR){automatic;};
encoder BtasV1_Enc : out_map(BTAS_V101_OutMap);
decoder  btasv1 : in_map(BTAS_V101_InMap);
/*
in_map BTASV101_RAW_InMap : external (BTAS_V101), target_internal(BTAS_V101_TI){automatic;};
out_map BTASV101_RAW_OutMap : external (BTAS_V101), internal(BTAS_V101_TI){automatic;};

encoder encodeBTASV101 : out_map(BTASV101_RAW_OutMap);
*/
/*********************BTAS CDR VERSION 1.0.2********************/

external BTAS_V102 : identified_by(cdrVerNb=="1.0.2") {
   // set {
     //   errorBlockBTAS_V2 errV2 : optional;
    //};
	ascii cdrGenNb                     :   int(base10),terminated_by(0x2C);
	ascii cdrVerNb                     :   terminated_by(0x2C);
	ascii siteName                     :   terminated_by(0x2C);
	ascii origCalledNb                 :   terminated_by(0x2C);
	ascii modifCalledNb                :   terminated_by(0x2C);
	ascii origCallingNb                :   terminated_by(0x2C);
	ascii modifCallingNb               :   terminated_by(0x2C);
	ascii callInitTime                 :   terminated_by(0x2C);
	ascii callStartTime                :   terminated_by(0x2C);
	ascii callEndTime                  :   terminated_by(0x2C);
	ascii callChargeableDur            :   int(base10), terminated_by(0x2C);
	ascii callAnsweredStatus           :   terminated_by(0x2C);
	ascii callDisconnectSrc            :   terminated_by(0x2C);
	ascii networkCallDisconnectReasonHeader : terminated_by(0x2C);
	ascii intCallDisconnectReasonCode  :   terminated_by(0x2C);
	ascii networkCallDisconnectCause   :   terminated_by(0x2C);
	ascii servedCallLeg                :   terminated_by(0x2C);
	ascii imsICID                      :   terminated_by(0x2C);
	ascii imsCallID                    :   terminated_by(0x2C);
	ascii pServedUser                  :   terminated_by(0x2C);
	ascii roSessionId                  :   terminated_by(0x2C);
	ascii negotiatedMedia1             :   terminated_by(0x2C);
	ascii negotiatedMedia2             :   terminated_by(0x2C);
	ascii clearCode                    :   terminated_by(0x2C);
	ascii longCallCdrInd               :   int(base10), terminated_by(0x2C);
	ascii pVisitedNetworkId            :   terminated_by(0x2C);
	ascii pAccessNetworkInfo           :   terminated_by(0x2C);
	ascii nbPortabilityRouteInfo       :   terminated_by(0x2C);
	ascii enterpriseId                 :   terminated_by(0x2C);
	ascii cugId                        :   terminated_by(0x2C);
	ascii cugType                      :   int(base10), terminated_by(0x2C);
	ascii reqUriTgrpId                 :   terminated_by(0x2C);
	ascii contactHeaderTgrpId          :   terminated_by(0x2C);
	ascii callFwdIndicator             :   int(base10), terminated_by(0x2C);
	ascii callFwdType                  :   int(base10), terminated_by(0x2C);
	ascii callFwdAssociatedPartyAddr   :   terminated_by(0x2C);
	ascii nbOfCallFwdDiversions        :   terminated_by(0x2C);
	ascii confIndicator                :   terminated_by(0x2C);
	ascii confCorrId                   :   terminated_by(0x2C);
	ascii onNetOffNetCallInd           :   terminated_by(0x2C);
    ascii pilotNumber                  :   terminated_by(0xA);
};

in_map BTAS_ErrorV2_InMap : external (errorBlockBTAS_V2), target_internal(errorBlockBTAS_V2){automatic;};
in_map BTASV102_InMap : external (BTAS_V102), internal(BTAS_UDR){
     automatic {
        errorBlockBTAS_V2 : using in_map BTAS_ErrorV2_InMap;
    };
};
out_map BTASV102_OutMap : external (BTAS_V102), internal(BTAS_UDR){automatic;};
encoder BtasV2_Enc : out_map(BTASV102_OutMap);
decoder  btasv2 : in_map(BTASV102_InMap);

/*********************BTAS CDR VERSION 1.0.3********************/
external BTAS_V103 : identified_by(cdrVerNb=="1.0.3") {
    set {
        errorBlockBTAS_V5 errV5 : optional; 
        };
	ascii cdrGenNb                     :   int(base10),terminated_by(0x2C);
	ascii cdrVerNb                     :   terminated_by(0x2C);
	ascii siteName                     :   terminated_by(0x2C);
	ascii origCalledNb                 :   terminated_by(0x2C);
	ascii modifCalledNb                :   terminated_by(0x2C);
	ascii origCallingNb                :   terminated_by(0x2C);
	ascii modifCallingNb               :   terminated_by(0x2C);
	ascii callInitTime                 :   terminated_by(0x2C);
	ascii callStartTime                :   terminated_by(0x2C);
	ascii callEndTime                  :   terminated_by(0x2C);
	ascii callChargeableDur            :   int(base10), terminated_by(0x2C);
	ascii callAnsweredStatus           :   terminated_by(0x2C);
	ascii callDisconnectSrc            :   terminated_by(0x2C);
	ascii networkCallDisconnectReasonHeader : terminated_by(0x2C);
	ascii intCallDisconnectReasonCode  :   terminated_by(0x2C);
	ascii networkCallDisconnectCause   :   terminated_by(0x2C);
	ascii servedCallLeg                :   terminated_by(0x2C);
	ascii imsICID                      :   terminated_by(0x2C);
	ascii imsCallID                    :   terminated_by(0x2C);
	ascii pServedUser                  :   terminated_by(0x2C);
	ascii roSessionId                  :   terminated_by(0x2C);
	ascii negotiatedMedia1             :   terminated_by(0x2C);
	ascii negotiatedMedia2             :   terminated_by(0x2C);
	ascii clearCode                    :   terminated_by(0x2C);
	ascii longCallCdrInd               :   int(base10), terminated_by(0x2C);
	ascii pVisitedNetworkId            :   terminated_by(0x2C);
	ascii pAccessNetworkInfo           :   terminated_by(0x2C);
	ascii nbPortabilityRouteInfo       :   terminated_by(0x2C);
	ascii enterpriseId                 :   terminated_by(0x2C);
	ascii cugId                        :   terminated_by(0x2C);
	ascii cugType                      :   int(base10), terminated_by(0x2C);
	ascii reqUriTgrpId                 :   terminated_by(0x2C);
	ascii contactHeaderTgrpId          :   terminated_by(0x2C);
	ascii callFwdIndicator             :   int(base10), terminated_by(0x2C);
	ascii callFwdType                  :   int(base10), terminated_by(0x2C);
	ascii callFwdAssociatedPartyAddr   :   terminated_by(0x2C);
	ascii nbOfCallFwdDiversions        :   terminated_by(0x2C);
	ascii confIndicator                :   terminated_by(0x2C);
	ascii confCorrId                   :   terminated_by(0x2C);
	ascii onNetOffNetCallInd           :   terminated_by(0x2C);
    ascii pilotNumber                  :   terminated_by(0x2C);
    ascii serviceType                  :   int(base10), terminated_by(0x2C);
    ascii callCUGClassIdentification   :   terminated_by(0x2C);
    ascii outgoingCallIndicator        :   terminated_by(0x2C);
    ascii callSetupResult              :   terminated_by(0x2C);
    ascii callSetupTime                :   terminated_by(0x2C);
    ascii callDisconnectDirection      :   terminated_by(0x2C);
    ascii callMediaType                :   int(base10), terminated_by(0x2C);
    ascii byteInviteTimeDiff           :   terminated_by(0x2C);
    ascii callSetupTimeDuration        :   terminated_by(0xA);
};

in_map errorBlockBTASAll_InMap : external (errorBlockBTAS_V5), target_internal(errorBlockBTAS_V5){automatic;};
in_map BTASV103_InMap : external (BTAS_V103), internal(BTAS_UDR){
   automatic {
        errorBlockBTAS_V5  : using in_map errorBlockBTASAll_InMap;
    };
};

out_map BTASV103_OutMap : external (BTAS_V103), internal(BTAS_UDR){automatic;};
encoder BtasV3_Enc : out_map(BTASV103_OutMap),out_map(BTASV104_OutMap), out_map(BTASV105_OutMap);
decoder  btasv3 : in_map(BTASV103_InMap);



/*********************BTAS CDR VERSION 1.0.4********************/

external BTAS_V104 : identified_by(cdrVerNb=="1.0.4") {
    set {
        errorBlockBTAS_V5 errV5 : optional;   
    }; 
	ascii cdrGenNb                         :   int(base10),terminated_by(0x2C);
	ascii cdrVerNb                         :   terminated_by(0x2C);
	ascii siteName                         :   terminated_by(0x2C);
	ascii origCalledNb                     :   terminated_by(0x2C);
	ascii modifCalledNb                    :   terminated_by(0x2C);
	ascii origCallingNb                    :   terminated_by(0x2C);
	ascii modifCallingNb                   :   terminated_by(0x2C);
	ascii callInitTime                     :   terminated_by(0x2C);
	ascii callStartTime                    :   terminated_by(0x2C);
	ascii callEndTime                      :   terminated_by(0x2C);
	ascii callChargeableDur                :   int(base10), terminated_by(0x2C);
	ascii callAnsweredStatus               :   terminated_by(0x2C);
	ascii callDisconnectSrc                :   terminated_by(0x2C);
	ascii networkCallDisconnectReasonHeader: terminated_by(0x2C);
	ascii intCallDisconnectReasonCode      :   terminated_by(0x2C);
	ascii networkCallDisconnectCause       :   terminated_by(0x2C);
	ascii servedCallLeg                    :   terminated_by(0x2C);
	ascii imsICID                          :   terminated_by(0x2C);
	ascii imsCallID                        :   terminated_by(0x2C);
	ascii pServedUser                      :   terminated_by(0x2C);
	ascii roSessionId                      :   terminated_by(0x2C);
	ascii negotiatedMedia1                 :   terminated_by(0x2C);
	ascii negotiatedMedia2                 :   terminated_by(0x2C);
	ascii clearCode                        :   terminated_by(0x2C);
	ascii longCallCdrInd                   :   int(base10), terminated_by(0x2C);
	ascii pVisitedNetworkId                :   terminated_by(0x2C);
	ascii pAccessNetworkInfo               :   terminated_by(0x2C);
	ascii nbPortabilityRouteInfo           :   terminated_by(0x2C);
	ascii enterpriseId                     :   terminated_by(0x2C);
	ascii cugId                            :   terminated_by(0x2C);
	ascii cugType                          :   int(base10), terminated_by(0x2C);
	ascii reqUriTgrpId                     :   terminated_by(0x2C);
	ascii contactHeaderTgrpId              :   terminated_by(0x2C);
	ascii callFwdIndicator                 :   int(base10), terminated_by(0x2C);
	ascii callFwdType                      :   int(base10), terminated_by(0x2C);
	ascii callFwdAssociatedPartyAddr       :   terminated_by(0x2C);
	ascii nbOfCallFwdDiversions            :   terminated_by(0x2C);
	ascii confIndicator                    :   terminated_by(0x2C);
	ascii confCorrId                       :   terminated_by(0x2C);
	ascii onNetOffNetCallInd               :   terminated_by(0x2C);
    ascii pilotNumber                      :   terminated_by(0x2C);
    ascii serviceType                      :   int(base10), terminated_by(0x2C);
    ascii callCUGClassIdentification       :   terminated_by(0x2C);
    ascii outgoingCallIndicator            :   terminated_by(0x2C);
    ascii callSetupResult                  :   terminated_by(0x2C);
    ascii callSetupTime                    :   terminated_by(0x2C);
    ascii callDisconnectDirection          :   terminated_by(0x2C);
    ascii callMediaType                    :   int(base10), terminated_by(0x2C);
    ascii byteInviteTimeDiff               :   terminated_by(0x2C);
    ascii callSetupTimeDuration            :   terminated_by(0x2C);
    ascii circleName                       :   terminated_by(0xA);
};

in_map BTASV104_InMap : external (BTAS_V104), internal(BTAS_UDR){
   automatic {
        errorBlockBTAS_V5 : using in_map errorBlockBTASAll_InMap;
    };
};

out_map BTASV104_OutMap : external (BTAS_V104), internal(BTAS_UDR){automatic;};
encoder BtasV4_Enc : out_map(BTASV104_OutMap);
decoder  btasv4 : in_map(BTASV104_InMap);


/*********************BTAS CDR VERSION 1.0.5********************/

external BTAS_V105 : identified_by((cdrVerNb=="1.0.5") || (cdrVerNb=="1.0.7")) {
    set {
        errorBlockBTAS_V5 errV5 : optional;  
    }; 
	ascii cdrGenNb                          :   int(base10),terminated_by(0x2C);
	ascii cdrVerNb                          :   terminated_by(0x2C);
	ascii siteName                          :   terminated_by(0x2C);
	ascii origCalledNb                      :   terminated_by(0x2C);
	ascii modifCalledNb                     :   terminated_by(0x2C);
	ascii origCallingNb                     :   terminated_by(0x2C);
	ascii modifCallingNb                    :   terminated_by(0x2C);
	ascii callInitTime                      :   terminated_by(0x2C);
	ascii callStartTime                     :   terminated_by(0x2C);
	ascii callEndTime                       :   terminated_by(0x2C);
	ascii callChargeableDur                 :   int(base10), terminated_by(0x2C);
	ascii callAnsweredStatus                :   terminated_by(0x2C);
	ascii callDisconnectSrc                 :   terminated_by(0x2C);
	ascii networkCallDisconnectReasonHeader : terminated_by(0x2C);
	ascii intCallDisconnectReasonCode       :   terminated_by(0x2C);
	ascii networkCallDisconnectCause        :   terminated_by(0x2C);
	ascii servedCallLeg                     :   terminated_by(0x2C);
	ascii imsICID                           :   terminated_by(0x2C);
	ascii imsCallID                         :   terminated_by(0x2C);
	ascii pServedUser                       :   terminated_by(0x2C);
	ascii roSessionId                       :   terminated_by(0x2C);
	ascii negotiatedMedia1                  :   terminated_by(0x2C);
	ascii negotiatedMedia2                  :   terminated_by(0x2C);
	ascii clearCode                         :   terminated_by(0x2C);
	ascii longCallCdrInd                    :   int(base10), terminated_by(0x2C);
	ascii pVisitedNetworkId                 :   terminated_by(0x2C);
	ascii pAccessNetworkInfo                :   terminated_by(0x2C);
	ascii nbPortabilityRouteInfo            :   terminated_by(0x2C);
	ascii enterpriseId                      :   terminated_by(0x2C);
	ascii cugId                             :   terminated_by(0x2C);
	ascii cugType                           :   int(base10), terminated_by(0x2C);
	ascii reqUriTgrpId                      :   terminated_by(0x2C);
	ascii contactHeaderTgrpId               :   terminated_by(0x2C);
	ascii callFwdIndicator                  :   int(base10), terminated_by(0x2C);
	ascii callFwdType                       :   int(base10), terminated_by(0x2C);
	ascii callFwdAssociatedPartyAddr        :   terminated_by(0x2C);
	ascii nbOfCallFwdDiversions             :   terminated_by(0x2C);
	ascii confIndicator                     :   terminated_by(0x2C);
	ascii confCorrId                        :   terminated_by(0x2C);
	ascii onNetOffNetCallInd                :   terminated_by(0x2C);
    ascii pilotNumber                       :   terminated_by(0x2C);
    ascii serviceType                       :   int(base10), terminated_by(0x2C);
    ascii callCUGClassIdentification        :   terminated_by(0x2C);
    ascii outgoingCallIndicator             :   terminated_by(0x2C);
    ascii callSetupResult                   :   terminated_by(0x2C);
    ascii callSetupTime                     :   terminated_by(0x2C);
    ascii callDisconnectDirection           :   terminated_by(0x2C);
    ascii callMediaType                     :   int(base10), terminated_by(0x2C);
    ascii byteInviteTimeDiff                :   terminated_by(0x2C);
    ascii callSetupTimeDuration             :   terminated_by(0x2C);
    ascii circleName                        :   terminated_by(0x2C);
    ascii reservedField1                    :   terminated_by(0x2C);
    ascii reservedField2                    :   terminated_by(0x2C);
    ascii reservedField3                    :   terminated_by(0x2C);
    ascii reservedField4                    :   terminated_by(0x2C);
    ascii reservedField5                    :   terminated_by(0x2C);
    ascii reservedField6                    :   terminated_by(0x2C);
    ascii reservedField7                    :   terminated_by(0x2C);
    ascii reservedField8                    :   terminated_by(0x2C);
    ascii callHolderCounter                 :   terminated_by(0x2C);
    ascii sip_Header                        :   terminated_by(0x2C);
    ascii reservedField9                    :   terminated_by(0x2C);
    ascii reservedField10                   :   terminated_by(0x2C);
    ascii to_Header                         :   terminated_by(0x2C);
    ascii PAI                               :   terminated_by(0x2C);
    ascii reservedField11                   :   terminated_by(0x2C);
    ascii callFlag                          :   terminated_by(0x2C);
    ascii reservedField12                   :   terminated_by(0x2C);
    ascii reservedField13                   :   terminated_by(0x2C);
    ascii reservedField14                   :   terminated_by(0x2C);
    ascii reservedField15                   :   terminated_by(0x2C);
    ascii reservedField16                   :   terminated_by(0xA);
};

//in_map errorBlockBTASV5_InMap : external (errorBlockBTAS_V5), target_internal(errorBlockBTAS_V5){automatic;};
in_map BTASV105_InMap : external (BTAS_V105), internal(BTAS_UDR){
   automatic {
        errorBlockBTAS_V5 : using in_map errorBlockBTASAll_InMap;
    };
};

out_map BTASV105_OutMap : external (BTAS_V105), internal(BTAS_UDR){automatic;};
encoder BtasV5_Enc : out_map(BTASV105_OutMap);
decoder  btasv5 : in_map(BTASV105_InMap);


/*********************BTAS Internal CDR*******************/
internal BTAS_UDR {
 	string sessionId;
    string calledNb;
    string callingNb;
    int cdrGenNb;
    string cdrVerNb;
    string siteName;
    string origCalledNb;
    string modifCalledNb;
    string origCallingNb;
    string modifCallingNb;
    string callInitTime;
    string callStartTime;
    string callEndTime;
    int callChargeableDur;
    string callAnsweredStatus;
    string callDisconnectSrc;
    string networkCallDisconnectReasonHeader ;
    string intCallDisconnectReasonCode;
    string networkCallDisconnectCause;
    string servedCallLeg;
    string imsICID;
    string imsCallID;
    string pServedUser;
    string roSessionId;
    string negotiatedMedia1;
    string negotiatedMedia2;
    string clearCode;
    string longCallCdrInd;
    string pVisitedNetworkId;
    string pAccessNetworkInfo;
    string nbPortabilityRouteInfo;
    string enterpriseId;
    string cugId;
    string cugType;
    string reqUriTgrpId;
    string contactHeaderTgrpId;
    int callFwdIndicator;
    string callFwdType;
    string callFwdAssociatedPartyAddr;
    string nbOfCallFwdDiversions;
    string confIndicator;
    string confCorrId;
    string onNetOffNetCallInd;
    string pilotNumber;
    string serviceType;
    string callCUGClassIdentification;
    string outgoingCallIndicator;
    string callSetupResult;
    string callSetupTime;
    string callDisconnectDirection;
    int callMediaType;
    string byteInviteTimeDiff;
    string callSetupTimeDuration;
    int callFlag;
    long dupcallStartTime; //added for DuplicateUdr Indexing
    string Lrn;         //added for bi
    string circleName;
    errorBlockBTAS_V5 errV5; //error Block version 5
};



internal normalizeInfo
{
	int numberOfDigitsToRemove;
	string prefixString;
	string productGroup;
	string normalizedNumber;
};

decoder  btasBaseDecoder : in_map(BTASV105_InMap),in_map(BTASV104_InMap),in_map(BTASV103_InMap), in_map(BTASV102_InMap), in_map(BTAS_V101_InMap);
encoder  btasBaseEncoder : out_map(BTASV105_OutMap),out_map(BTASV104_OutMap),out_map(BTAS_V101_OutMap), out_map(BTASV102_OutMap), out_map(BTASV103_OutMap);
//BTAS cdr decoder ends

//BI external
external BIUdr {
ascii callingNumber        			    : 	  terminated_by(",");
    ascii calledNumber         			: 	  terminated_by(",");
    ascii callStartDate        			: 	  terminated_by(",");
    ascii callStartTime        			: 	  terminated_by(",");
    ascii callEndDate          			: 	  terminated_by(",");
    ascii callEndTime          			: 	  terminated_by(",");
    ascii callDuration         			: 	  terminated_by(",");
    ascii firstCellID          			: 	  terminated_by(",");
    ascii lastCellID           			: 	  terminated_by(",");
    ascii callType             			: 	  terminated_by(",");
    ascii IMEI                 			: 	  terminated_by(",");
    ascii IMSI                 			: 	  terminated_by(",");
    ascii imsVisitedNetworkID  			: 	  terminated_by(",");
    ascii firstRomingCircleID  			: 	  terminated_by(",");
    ascii LRN                  			: 	  terminated_by(",");
    ascii CNumber              			: 	  terminated_by(",");
    ascii paniHeader           			: 	  terminated_by(",");
    ascii iCID                 			: 	  terminated_by(",");
    ascii recordType           			: 	  terminated_by(",");
    ascii pilotNumber         			:     terminated_by(",");
    ascii AwlsWlnInfo          			:     terminated_by(","); //WLS/WLN A number
    ascii onnetOffnet          			:     terminated_by(","); //ONNET/OFFNET
    ascii callLocationInfo     			:     terminated_by(","); //LOCAL/STD/ISD
    ascii homeRoamInfo         			:     terminated_by(","); //home/roam 
    ascii BwlsWlnInfo          			:     terminated_by(","); //WLS/WLN B number
    ascii SDCA                 			:     terminated_by(","); //SDCA
    ascii requestedPartyNumber 			:     terminated_by(","); //DialedNumber
    ascii callAnsweredStatus 			:     terminated_by(","); 
    ascii callFwdType 			        :     terminated_by(","); 
    ascii onNetOffNetCallInd      	    :     terminated_by(","); 
    ascii confIndicator	    	        :     terminated_by(","); 
    ascii callCUGClassIdentification	:     terminated_by(","); 
    ascii outgoingCallIndicator     	:     terminated_by(","); 
    ascii intCallDisconnectReasonCode  	:     terminated_by(","); 
    ascii otherPartyCircle              :     terminated_by(","); 
    ascii otherPartyOperator            :     terminated_by(","); 
    ascii HomeCircleCode                :     terminated_by(",");
    ascii callFlag                      :     terminated_by(0xA);
};

in_map BIInputMap : external(BIUdr), target_internal(BIUdr_TI) {automatic;};
decoder BIInputDeoder : in_map(BIInputMap);

out_map BIOutputMap : external(BIUdr), internal(BIUdr_TI) {automatic;};
encoder BIOutputEncoder : out_map(BIOutputMap);


//Error block
external ErrorBlockBTAS : identified_by(strStartsWith(errorCode, "DRP") || strStartsWith(errorCode, "ERR")) {
    ascii errorCode        : terminated_by(",");
    ascii errorMessage     : terminated_by(",");
};

external errorBlockBTAS_V2 : identified_by(strStartsWith(errorCode, "DRP") || strStartsWith(errorCode, "ERR")) {
    ascii errorCode        : terminated_by(",");
    ascii errorMessage     : terminated_by(",");
};


external errorBlockBTAS_V5 : identified_by(strStartsWith(errorCode, "DRP") || strStartsWith(errorCode, "ERR")) {
    ascii errorCode        : terminated_by(",");
    ascii errorMessage     : terminated_by(",");
};
//Start of Interconnect Decoder
external inContentFormat_GenBand {

    ascii incomingSwitch         : align(left), padded_with(0x20), static_size(20);
    ascii outgoingSwitch         : align(left), padded_with(0x20), static_size(20);
    ascii eventStartDate         : align(left), padded_with(0x20), static_size(8);
    ascii eventStartTime         : align(left), padded_with(0x20), static_size(8);
    ascii eventDuration          : align(right), padded_with("0"), static_size(10);
    ascii aNum                   : align(left), padded_with(0x20), static_size(28); 
    ascii bNum                   : align(left), padded_with(0x20), static_size(28);
    ascii incomingTrunk          : align(left), padded_with(0x20), static_size(20);
    ascii outgoingTrunk          : align(left), padded_with(0x20), static_size(20);
    ascii incomingProduct        : align(left), padded_with(0x20), static_size(14); 
    ascii outgoingProduct        : align(left), padded_with(0x20), static_size(14);
    ascii eventDirection         : align(left), padded_with(0x20), static_size(1);
    ascii discreteRatingParam_1  : align(left), padded_with(0x20), static_size(15); 
    ascii dataUnit               : align(left), padded_with(0x20), static_size(8);
    ascii recSeqNum              : long(base10), align(left), padded_with(0x20), static_size(40);
    ascii recType                : align(left), padded_with(0x20), static_size(2); 
    ascii userSummarization      : align(left), padded_with(0x20), static_size(20);
    ascii userData               : align(left), padded_with(0x20), static_size(30);
    ascii userData_2             : align(left), padded_with(0x20), static_size(30);
    ascii linkField              : align(left), padded_with(0x20), static_size(2); 
    ascii userData_3             : align(left), padded_with(0x20), static_size(80);   
    ascii lineFeed               : terminated_by(0xA), external_only;
};

in_map contentGenBand_imap : external(inContentFormat_GenBand), target_internal(inContentFormatGenBand_TI){automatic;};

decoder inContentFormatGenBand_Dec : in_map(contentGenBand_imap);

out_map contentGenBand_OutMap : internal(inContentFormatGenBand_TI),external(inContentFormat_GenBand) { 
    automatic;
};

encoder contentGenBand_Enc : out_map(contentGenBand_OutMap);

//Intec record ends


internal IntecInternal{
    string sCallingNum;
    string sCalledNum;
    string sCNum;
    string sCallingNumCircleId;
    string sCalledNumCircleId;
    string sLRN;
    string sMediaType;
    string sCallDuration;
    string sCallStartTime;
    string sCallStartDate; 
    string sAnumProductId;
    string sBnumProductId;
    string sAZoneCode;
    string sBZoneCode;
    string sCalledNumOperatorId;
    int sRecSeqNumber;
    string CallType;
    string sIcid;
};

internal DropCDR{
    string dropCode;
    string dropMsg;
};

internal SearchNode {
    int minLength;
    string regEx;
    map<string, SearchNode> NextNode;
    map<string, map<string,any>> colValues;
};

//New LIM Addition

external BI_LIM_UDR {
    ascii callingNumber        			: 	  terminated_by(",");
    ascii calledNumber         			: 	  terminated_by(",");
    ascii callStartDate        			: 	  terminated_by(",");
    ascii callStartTime        			: 	  terminated_by(",");
    ascii callEndDate          			: 	  terminated_by(",");
    ascii callEndTime          			: 	  terminated_by(",");
    ascii callDuration         			: 	  terminated_by(",");
    ascii firstCellID          			: 	  terminated_by(",");
    ascii lastCellID           			: 	  terminated_by(",");
    ascii callType             			: 	  terminated_by(",");
    ascii IMEI                 			: 	  terminated_by(",");
    ascii IMSI                 			: 	  terminated_by(",");
    ascii imsVisitedNetworkID  			: 	  terminated_by(",");
    ascii firstRomingCircleID  			: 	  terminated_by(",");
    ascii LRN                  			: 	  terminated_by(",");
    ascii CNumber              			: 	  terminated_by(",");
    ascii paniHeader           			: 	  terminated_by(",");
    ascii iCID                 			: 	  terminated_by(",");
    ascii recordType           			: 	  terminated_by(",");
    ascii pilotNumber         			:     terminated_by(",");
    ascii AwlsWlnInfo          			:     terminated_by(","); //WLS/WLN A number
    ascii onnetOffnet          			:     terminated_by(","); //ONNET/OFFNET
    ascii callLocationInfo     			:     terminated_by(","); //LOCAL/STD/ISD
    ascii homeRoamInfo         			:     terminated_by(","); //home/roam 
    ascii BwlsWlnInfo          			:     terminated_by(","); //WLS/WLN B number
    ascii SDCA                 			:     terminated_by(","); //SDCA
    ascii requestedPartyNumber 			:     terminated_by(","); //DialedNumber
    ascii callAnsweredStatus 			:     terminated_by(","); 
    ascii callFwdType 			        :     terminated_by(","); 
    ascii onNetOffNetCallInd      	    :     terminated_by(","); 
    ascii confIndicator	    	        :     terminated_by(","); 
    ascii callCUGClassIdentification	:     terminated_by(","); 
    ascii outgoingCallIndicator     	:     terminated_by(","); 
    ascii intCallDisconnectReasonCode  	:     terminated_by(","); 
    ascii otherPartyCircle              :     terminated_by(","); 
    ascii otherPartyOperator            :     terminated_by(","); 
    ascii HomeCircleCode                :     terminated_by(",");
    ascii callFlag                      :     terminated_by(",");
    ascii callDirection			        :     terminated_by(","); //IN/OUT
	ascii serviceType                   :     terminated_by(","); //Voice/Video
	ascii LRNDesc                       :     terminated_by(","); //MO CircleOperator
	ascii SwitchID                      :     terminated_by(","); //orignate CDR Switch
	ascii inTG                          :     terminated_by(","); //incoming TGNAME
	ascii outTG                         :     terminated_by(","); //Outgoing TGNAME
	ascii RoamingCircleName             :     terminated_by(","); //Home CircleName
    ascii EnterpriseId                  :     terminated_by(",");
    ascii CUGID                         :     terminated_by(",");  
    ascii CUGType                       :     terminated_by(0xA);
};

in_map BILIM_InputMap : external(BI_LIM_UDR), target_internal(BILIM_Udr_TI) {automatic;};
decoder BILIM_InputDeoder : in_map(BILIM_InputMap);

out_map BILIM_OutputMap : external(BI_LIM_UDR), internal(BILIM_Udr_TI) {automatic;};
encoder BILIM_OutputEncoder : out_map(BILIM_OutputMap);
