external BTAS_V101   :   identified_by(cdrVerNb=="1.0.1"){    
	ascii cdrGenNb                     : int(base10),terminated_by(0x2C);
	ascii cdrVerNb                     : terminated_by(0x2C);
	ascii siteName                     : terminated_by(0x2C);
	ascii origCalledNb                 : terminated_by(0x2C);
	ascii modifCalledNb                : terminated_by(0x2C);
	ascii origCallingNb                : terminated_by(0x2C);
	ascii modifCallingNb               : terminated_by(0x2C);
	ascii callInitTime                 : terminated_by(0x2C);
	ascii callStartTime                : terminated_by(0x2C);
	ascii callEndTime                  : terminated_by(0x2C);
	ascii callChargeableDur            : int(base10), terminated_by(0x2C);
	ascii callAnsweredStatus           : terminated_by(0x2C);
	ascii callDisconnectSrc            : terminated_by(0x2C);
	ascii networkCallDisconnectReasonHeader : terminated_by(0x2C);
	ascii intCallDisconnectReasonCode  : terminated_by(0x2C);
	ascii networkCallDisconnectCause   : terminated_by(0x2C);
	ascii servedCallLeg                : terminated_by(0x2C);
	ascii imsICID                      : terminated_by(0x2C);
	ascii imsCallID                    : terminated_by(0x2C);
	ascii pServedUser                  : terminated_by(0x2C);
	ascii roSessionId                  : terminated_by(0x2C);
	ascii negotiatedMedia1             : terminated_by(0x2C);
	ascii negotiatedMedia2             : terminated_by(0x2C);
	ascii clearCode                    : terminated_by(0x2C);
	ascii longCallCdrInd               : int(base10), terminated_by(0x2C);
	ascii pVisitedNetworkId            : terminated_by(0x2C);
	ascii pAccessNetworkInfo           : terminated_by(0x2C);
	ascii nbPortabilityRouteInfo       : terminated_by(0x2C);
	ascii enterpriseId                 : terminated_by(0x2C);
	ascii cugId                        : terminated_by(0x2C);
	ascii cugType                      : int(base10), terminated_by(0x2C);
	ascii reqUriTgrpId                 : terminated_by(0x2C);
	ascii contactHeaderTgrpId          : terminated_by(0x2C);
	ascii callFwdIndicator             : int(base10), terminated_by(0x2C);
	ascii callFwdType                  : int(base10), terminated_by(0x2C);
	ascii callFwdAssociatedPartyAddr   : terminated_by(0x2C);
	ascii nbOfCallFwdDiversions        : terminated_by(0x2C);
	ascii confIndicator                : terminated_by(0x2C);
	ascii confCorrId                   : terminated_by(0x2C);
	ascii onNetOffNetCallInd           : terminated_by(0xA);
};


in_map BTAS_Error_InMap : external (ErrorBlockBTAS), target_internal(ErrorBlockBTAS){automatic;};
in_map BTAS_V101_InMap : external (BTAS_V101), internal(BTAS_UDR){
    automatic {
        ErrorBlockBTAS : using in_map BTAS_Error_InMap;
    };
};

out_map BTAS_V101_OutMap : external (BTAS_V101), internal(BTAS_UDR){automatic;};
encoder BtasV1_Enc : out_map(BTAS_V101_OutMap);
decoder  btasv1 : in_map(BTAS_V101_InMap);
/*
in_map BTASV101_RAW_InMap : external (BTAS_V101), target_internal(BTAS_V101_TI){automatic;};
out_map BTASV101_RAW_OutMap : external (BTAS_V101), internal(BTAS_V101_TI){automatic;};

encoder encodeBTASV101 : out_map(BTASV101_RAW_OutMap);
*/
/*********************BTAS CDR VERSION 1.0.2********************/

external BTAS_V102 : identified_by(cdrVerNb=="1.0.2") {
	ascii cdrGenNb                     :   int(base10),terminated_by(0x2C);
	ascii cdrVerNb                     :   terminated_by(0x2C);
	ascii siteName                     :   terminated_by(0x2C);
	ascii origCalledNb                 :   terminated_by(0x2C);
	ascii modifCalledNb                :   terminated_by(0x2C);
	ascii origCallingNb                :   terminated_by(0x2C);
	ascii modifCallingNb               :   terminated_by(0x2C);
	ascii callInitTime                 :   terminated_by(0x2C);
	ascii callStartTime                :   terminated_by(0x2C);
	ascii callEndTime                  :   terminated_by(0x2C);
	ascii callChargeableDur            :   int(base10), terminated_by(0x2C);
	ascii callAnsweredStatus           :   terminated_by(0x2C);
	ascii callDisconnectSrc            :   terminated_by(0x2C);
	ascii networkCallDisconnectReasonHeader : terminated_by(0x2C);
	ascii intCallDisconnectReasonCode  :   terminated_by(0x2C);
	ascii networkCallDisconnectCause   :   terminated_by(0x2C);
	ascii servedCallLeg                :   terminated_by(0x2C);
	ascii imsICID                      :   terminated_by(0x2C);
	ascii imsCallID                    :   terminated_by(0x2C);
	ascii pServedUser                  :   terminated_by(0x2C);
	ascii roSessionId                  :   terminated_by(0x2C);
	ascii negotiatedMedia1             :   terminated_by(0x2C);
	ascii negotiatedMedia2             :   terminated_by(0x2C);
	ascii clearCode                    :   terminated_by(0x2C);
	ascii longCallCdrInd               :   int(base10), terminated_by(0x2C);
	ascii pVisitedNetworkId            :   terminated_by(0x2C);
	ascii pAccessNetworkInfo           :   terminated_by(0x2C);
	ascii nbPortabilityRouteInfo       :   terminated_by(0x2C);
	ascii enterpriseId                 :   terminated_by(0x2C);
	ascii cugId                        :   terminated_by(0x2C);
	ascii cugType                      :   int(base10), terminated_by(0x2C);
	ascii reqUriTgrpId                 :   terminated_by(0x2C);
	ascii contactHeaderTgrpId          :   terminated_by(0x2C);
	ascii callFwdIndicator             :   int(base10), terminated_by(0x2C);
	ascii callFwdType                  :   int(base10), terminated_by(0x2C);
	ascii callFwdAssociatedPartyAddr   :   terminated_by(0x2C);
	ascii nbOfCallFwdDiversions        :   terminated_by(0x2C);
	ascii confIndicator                :   terminated_by(0x2C);
	ascii confCorrId                   :   terminated_by(0x2C);
	ascii onNetOffNetCallInd           :   terminated_by(0x2C);
    ascii pilotNumber                  :   terminated_by(0xA);
};

in_map BTAS_ErrorV2_InMap : external (errorBlockBTAS_V2), target_internal(errorBlockBTAS_V2){automatic;};
in_map BTASV102_InMap : external (BTAS_V102), internal(BTAS_UDR){
     automatic {
        errorBlockBTAS_V2 : using in_map BTAS_ErrorV2_InMap;
    };
};
out_map BTASV102_OutMap : external (BTAS_V102), internal(BTAS_UDR){automatic;};
encoder BtasV2_Enc : out_map(BTASV102_OutMap);
decoder  btasv2 : in_map(BTASV102_InMap);
/*********************BTAS CDR VERSION 1.0.3********************/

external BTAS_V103 : identified_by(cdrVerNb=="1.0.3") {
    set {
        errorBlockBTAS_V3 errV3 : optional;
    };
	ascii cdrGenNb                     :   int(base10),terminated_by(0x2C);
	ascii cdrVerNb                     :   terminated_by(0x2C);
	ascii siteName                     :   terminated_by(0x2C);
	ascii origCalledNb                 :   terminated_by(0x2C);
	ascii modifCalledNb                :   terminated_by(0x2C);
	ascii origCallingNb                :   terminated_by(0x2C);
	ascii modifCallingNb               :   terminated_by(0x2C);
	ascii callInitTime                 :   terminated_by(0x2C);
	ascii callStartTime                :   terminated_by(0x2C);
	ascii callEndTime                  :   terminated_by(0x2C);
	ascii callChargeableDur            :   int(base10), terminated_by(0x2C);
	ascii callAnsweredStatus           :   terminated_by(0x2C);
	ascii callDisconnectSrc            :   terminated_by(0x2C);
	ascii networkCallDisconnectReasonHeader : terminated_by(0x2C);
	ascii intCallDisconnectReasonCode  :   terminated_by(0x2C);
	ascii networkCallDisconnectCause   :   terminated_by(0x2C);
	ascii servedCallLeg                :   terminated_by(0x2C);
	ascii imsICID                      :   terminated_by(0x2C);
	ascii imsCallID                    :   terminated_by(0x2C);
	ascii pServedUser                  :   terminated_by(0x2C);
	ascii roSessionId                  :   terminated_by(0x2C);
	ascii negotiatedMedia1             :   terminated_by(0x2C);
	ascii negotiatedMedia2             :   terminated_by(0x2C);
	ascii clearCode                    :   terminated_by(0x2C);
	ascii longCallCdrInd               :   int(base10), terminated_by(0x2C);
	ascii pVisitedNetworkId            :   terminated_by(0x2C);
	ascii pAccessNetworkInfo           :   terminated_by(0x2C);
	ascii nbPortabilityRouteInfo       :   terminated_by(0x2C);
	ascii enterpriseId                 :   terminated_by(0x2C);
	ascii cugId                        :   terminated_by(0x2C);
	ascii cugType                      :   int(base10), terminated_by(0x2C);
	ascii reqUriTgrpId                 :   terminated_by(0x2C);
	ascii contactHeaderTgrpId          :   terminated_by(0x2C);
	ascii callFwdIndicator             :   int(base10), terminated_by(0x2C);
	ascii callFwdType                  :   int(base10), terminated_by(0x2C);
	ascii callFwdAssociatedPartyAddr   :   terminated_by(0x2C);
	ascii nbOfCallFwdDiversions        :   terminated_by(0x2C);
	ascii confIndicator                :   terminated_by(0x2C);
	ascii confCorrId                   :   terminated_by(0x2C);
	ascii onNetOffNetCallInd           :   terminated_by(0x2C);
    ascii pilotNumber                  :   terminated_by(0x2C);
    ascii serviceType                  :   int(base10), terminated_by(0x2C);
    ascii callCUGClassIdentification   :   terminated_by(0x2C);
    ascii outgoingCallIndicator        :   terminated_by(0x2C);
    ascii callSetupResult              :   terminated_by(0x2C);
    ascii callSetupTime                :   terminated_by(0x2C);
    ascii callDisconnectDirection      :   terminated_by(0x2C);
    ascii callMediaType                :   int(base10), terminated_by(0x2C);
    ascii byteInviteTimeDiff           :   terminated_by(0x2C);
    ascii callSetupTimeDuration        :   terminated_by(0xA);
};

in_map errorBlockBTASV3_InMap : external (errorBlockBTAS_V3), target_internal(errorBlockBTAS_V3){automatic;};
in_map BTASV103_InMap : external (BTAS_V103), internal(BTAS_UDR){
   automatic {
        errorBlockBTAS_V3 : using in_map errorBlockBTASV3_InMap;
    };
};

out_map BTASV103_OutMap : external (BTAS_V103), internal(BTAS_UDR){automatic;};
encoder BtasV3_Enc : out_map(BTASV103_OutMap);
decoder  btasv3 : in_map(BTASV103_InMap);

/*********************BTAS CDR VERSION 1.0.4********************/

external BTAS_V104 : identified_by(cdrVerNb=="1.0.4") {
    set {
        errorBlockBTAS_V3 errV3 : optional;
    };
	ascii cdrGenNb                     :   int(base10),terminated_by(0x2C);
	ascii cdrVerNb                     :   terminated_by(0x2C);
	ascii siteName                     :   terminated_by(0x2C);
	ascii origCalledNb                 :   terminated_by(0x2C);
	ascii modifCalledNb                :   terminated_by(0x2C);
	ascii origCallingNb                :   terminated_by(0x2C);
	ascii modifCallingNb               :   terminated_by(0x2C);
	ascii callInitTime                 :   terminated_by(0x2C);
	ascii callStartTime                :   terminated_by(0x2C);
	ascii callEndTime                  :   terminated_by(0x2C);
	ascii callChargeableDur            :   int(base10), terminated_by(0x2C);
	ascii callAnsweredStatus           :   terminated_by(0x2C);
	ascii callDisconnectSrc            :   terminated_by(0x2C);
	ascii networkCallDisconnectReasonHeader : terminated_by(0x2C);
	ascii intCallDisconnectReasonCode  :   terminated_by(0x2C);
	ascii networkCallDisconnectCause   :   terminated_by(0x2C);
	ascii servedCallLeg                :   terminated_by(0x2C);
	ascii imsICID                      :   terminated_by(0x2C);
	ascii imsCallID                    :   terminated_by(0x2C);
	ascii pServedUser                  :   terminated_by(0x2C);
	ascii roSessionId                  :   terminated_by(0x2C);
	ascii negotiatedMedia1             :   terminated_by(0x2C);
	ascii negotiatedMedia2             :   terminated_by(0x2C);
	ascii clearCode                    :   terminated_by(0x2C);
	ascii longCallCdrInd               :   int(base10), terminated_by(0x2C);
	ascii pVisitedNetworkId            :   terminated_by(0x2C);
	ascii pAccessNetworkInfo           :   terminated_by(0x2C);
	ascii nbPortabilityRouteInfo       :   terminated_by(0x2C);
	ascii enterpriseId                 :   terminated_by(0x2C);
	ascii cugId                        :   terminated_by(0x2C);
	ascii cugType                      :   int(base10), terminated_by(0x2C);
	ascii reqUriTgrpId                 :   terminated_by(0x2C);
	ascii contactHeaderTgrpId          :   terminated_by(0x2C);
	ascii callFwdIndicator             :   int(base10), terminated_by(0x2C);
	ascii callFwdType                  :   int(base10), terminated_by(0x2C);
	ascii callFwdAssociatedPartyAddr   :   terminated_by(0x2C);
	ascii nbOfCallFwdDiversions        :   terminated_by(0x2C);
	ascii confIndicator                :   terminated_by(0x2C);
	ascii confCorrId                   :   terminated_by(0x2C);
	ascii onNetOffNetCallInd           :   terminated_by(0x2C);
    ascii pilotNumber                  :   terminated_by(0x2C);
    ascii serviceType                  :   int(base10), terminated_by(0x2C);
    ascii callCUGClassIdentification   :   terminated_by(0x2C);
    ascii outgoingCallIndicator        :   terminated_by(0x2C);
    ascii callSetupResult              :   terminated_by(0x2C);
    ascii callSetupTime                :   terminated_by(0x2C);
    ascii callDisconnectDirection      :   terminated_by(0x2C);
    ascii callMediaType                :   int(base10), terminated_by(0x2C);
    ascii byteInviteTimeDiff           :   terminated_by(0x2C);
    ascii callSetupTimeDuration        :   terminated_by(0x2C);
    ascii circleName                   :   terminated_by(0xA);
};


in_map BTASV104_InMap : external (BTAS_V104), internal(BTAS_UDR){
   automatic {
        errorBlockBTAS_V3 : using in_map errorBlockBTASV3_InMap;
    };
};

out_map BTASV104_OutMap : external (BTAS_V104), internal(BTAS_UDR){automatic;};
encoder BtasV4_Enc : out_map(BTASV104_OutMap);
decoder  btasv4 : in_map(BTASV104_InMap);

/*********************BTAS CDR VERSION 1.0.5********************/

external BTAS_V105 : identified_by((cdrVerNb=="1.0.5") || (cdrVerNb=="1.0.7")) {
    set {
        errorBlockBTAS_V3 errV3 : optional;  
    }; 
	ascii cdrGenNb                         :   int(base10),terminated_by(0x2C);
	ascii cdrVerNb                         :   terminated_by(0x2C);
	ascii siteName                         :   terminated_by(0x2C);
	ascii origCalledNb                     :   terminated_by(0x2C);
	ascii modifCalledNb                    :   terminated_by(0x2C);
	ascii origCallingNb                :   terminated_by(0x2C);
	ascii modifCallingNb               :   terminated_by(0x2C);
	ascii callInitTime                 :   terminated_by(0x2C);
	ascii callStartTime                :   terminated_by(0x2C);
	ascii callEndTime                  :   terminated_by(0x2C);
	ascii callChargeableDur            :   int(base10), terminated_by(0x2C);
	ascii callAnsweredStatus           :   terminated_by(0x2C);
	ascii callDisconnectSrc            :   terminated_by(0x2C);
	ascii networkCallDisconnectReasonHeader : terminated_by(0x2C);
	ascii intCallDisconnectReasonCode  :   terminated_by(0x2C);
	ascii networkCallDisconnectCause   :   terminated_by(0x2C);
	ascii servedCallLeg                :   terminated_by(0x2C);
	ascii imsICID                      :   terminated_by(0x2C);
	ascii imsCallID                    :   terminated_by(0x2C);
	ascii pServedUser                  :   terminated_by(0x2C);
	ascii roSessionId                  :   terminated_by(0x2C);
	ascii negotiatedMedia1             :   terminated_by(0x2C);
	ascii negotiatedMedia2             :   terminated_by(0x2C);
	ascii clearCode                    :   terminated_by(0x2C);
	ascii longCallCdrInd               :   int(base10), terminated_by(0x2C);
	ascii pVisitedNetworkId            :   terminated_by(0x2C);
	ascii pAccessNetworkInfo           :   terminated_by(0x2C);
	ascii nbPortabilityRouteInfo       :   terminated_by(0x2C);
	ascii enterpriseId                 :   terminated_by(0x2C);
	ascii cugId                        :   terminated_by(0x2C);
	ascii cugType                      :   int(base10), terminated_by(0x2C);
	ascii reqUriTgrpId                 :   terminated_by(0x2C);
	ascii contactHeaderTgrpId          :   terminated_by(0x2C);
	ascii callFwdIndicator             :   int(base10), terminated_by(0x2C);
	ascii callFwdType                  :   int(base10), terminated_by(0x2C);
	ascii callFwdAssociatedPartyAddr   :   terminated_by(0x2C);
	ascii nbOfCallFwdDiversions        :   terminated_by(0x2C);
	ascii confIndicator                :   terminated_by(0x2C);
	ascii confCorrId                   :   terminated_by(0x2C);
	ascii onNetOffNetCallInd           :   terminated_by(0x2C);
    ascii pilotNumber                  :   terminated_by(0x2C);
    ascii serviceType                  :   int(base10), terminated_by(0x2C);
    ascii callCUGClassIdentification   :   terminated_by(0x2C);
    ascii outgoingCallIndicator        :   terminated_by(0x2C);
    ascii callSetupResult              :   terminated_by(0x2C);
    ascii callSetupTime                :   terminated_by(0x2C);
    ascii callDisconnectDirection      :   terminated_by(0x2C);
    ascii callMediaType                :   int(base10), terminated_by(0x2C);
    ascii byteInviteTimeDiff           :   terminated_by(0x2C);
    ascii callSetupTimeDuration        :   terminated_by(0x2C);
    ascii circleName                   :   terminated_by(0x2C);
    ascii reservedField1               :   terminated_by(0x2C);
    ascii reservedField2               :   terminated_by(0x2C);
    ascii reservedField3               :   terminated_by(0x2C);
    ascii reservedField4               :   terminated_by(0x2C);
    ascii reservedField5               :   terminated_by(0x2C);
    ascii reservedField6               :   terminated_by(0x2C);
    ascii reservedField7               :   terminated_by(0x2C);
    ascii reservedField8               :   terminated_by(0x2C);
    ascii callHolderCounter            :   terminated_by(0x2C);
    ascii sip_Header                   :   terminated_by(0x2C);
    ascii reservedField9               :   terminated_by(0x2C);
    ascii reservedField10              :   terminated_by(0x2C);
    ascii to_Header                    :   terminated_by(0x2C);
    ascii PAI                          :   terminated_by(0x2C);
    ascii reservedField11              :   terminated_by(0x2C);
    ascii callFlag                     :   terminated_by(0x2C);
    ascii reservedField12              :   terminated_by(0x2C);
    ascii reservedField13              :   terminated_by(0x2C);
    ascii reservedField14              :   terminated_by(0x2C);
    ascii reservedField15              :   terminated_by(0x2C);
    ascii reservedField16              :   terminated_by(0xA);
};


in_map BTASV105_InMap : external (BTAS_V105), internal(BTAS_UDR){
   automatic {
        errorBlockBTAS_V3 : using in_map errorBlockBTASV3_InMap;
    };
};

out_map BTASV105_OutMap : external (BTAS_V105), internal(BTAS_UDR){automatic;};
encoder BtasV5_Enc : out_map(BTASV105_OutMap);
decoder  btasv5 : in_map(BTASV105_InMap);

/*********************BTAS Internal CDR*******************/
internal BTAS_UDR {
 	string sessionId;
    string calledNb;
    string callingNb;
    int cdrGenNb;
    string cdrVerNb;
    string siteName;
    string origCalledNb;
    string modifCalledNb;
    string origCallingNb;
    string modifCallingNb;
    string callInitTime;
    string callStartTime;
    string callEndTime;
    int callChargeableDur;
    string callAnsweredStatus;
    string callDisconnectSrc;
    string networkCallDisconnectReasonHeader ;
    string intCallDisconnectReasonCode;
    string networkCallDisconnectCause;
    string servedCallLeg;
    string imsICID;
    string imsCallID;
    string pServedUser;
    string roSessionId;
    string negotiatedMedia1;
    string negotiatedMedia2;
    string clearCode;
    int longCallCdrInd;
    string pVisitedNetworkId;
    string pAccessNetworkInfo;
    string nbPortabilityRouteInfo;
    string enterpriseId;
    string cugId;
    int cugType;
    string reqUriTgrpId;
    string contactHeaderTgrpId;
    int callFwdIndicator;
    int callFwdType;
    string callFwdAssociatedPartyAddr;
    string nbOfCallFwdDiversions;
    string confIndicator;
    string confCorrId;
    string onNetOffNetCallInd;
    string pilotNumber;
    int serviceType;
    string callCUGClassIdentification;
    string outgoingCallIndicator;
    string callSetupResult;
    string callSetupTime;
    string callDisconnectDirection;
    int callMediaType;
    string byteInviteTimeDiff;
    string callSetupTimeDuration;
    errorBlockBTAS_V3 errV3;
    //khchoy additional field for V1.0.5 or 1.0.7
    string circleName;
    string sip_Header;
    int callHolderCounter;
    string to_Header;
    string PAI;
    string callFlag;
};

decoder  btasBaseDecoder : in_map(BTASV103_InMap), in_map(BTASV104_InMap), in_map(BTASV105_InMap);
encoder  btasBaseEncoder : out_map(BTASV103_OutMap), out_map(BTASV104_OutMap), out_map(BTASV105_OutMap);

internal CCSessionMetadata {
    /*string cugId;
    string sessionKey;
    int chargableDuration;  */
    BTAS_UDR btasUDR;
    string serviceType;
};

//Error block
external ErrorBlockBTAS : identified_by(strStartsWith(errorCode, "DRP")) {
    ascii errorCode        : terminated_by(",");
    ascii errorMessage     : terminated_by(",");
};

external errorBlockBTAS_V2 : identified_by(strStartsWith(errorCode, "DRP")) {
    ascii errorCode        : terminated_by(",");
    ascii errorMessage     : terminated_by(",");
};

external errorBlockBTAS_V3 : identified_by(strStartsWith(errorCode, "DRP")) {
    ascii errorCode        : terminated_by(",");
    ascii errorMessage     : terminated_by(",");
};

external errorBlockBTAS_V4 : identified_by(strStartsWith(errorCode, "DRP")) {
    ascii errorCode        : terminated_by(",");
    ascii errorMessage     : terminated_by(",");
};

external errorBlockBTAS_V5 : identified_by(strStartsWith(errorCode, "DRP")) {
    ascii errorCode        : terminated_by(",");
    ascii errorMessage     : terminated_by(",");
};

internal NbNormInfo{
    string  sPrefixAppend;
    int trimCharsCount;
};

internal DropCDRInfo{
    string dropCode;
    string dropMsg;
};

internal chargeableUDR{
    BTAS_UDR btasUDR;
    string dupKey;
    long callInitTime;
};