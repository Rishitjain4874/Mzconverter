external CTAS_V200 {
    set {
        errorBlockCTAS_V20 errV20 : optional;  
    }; 
	ascii cdrGenNb                         :   int(base10),terminated_by(0x2C);
	ascii cdrVerNb                         :   terminated_by(0x2C);
	ascii siteName                         :   terminated_by(0x2C);
	ascii origCalledNb                     :   terminated_by(0x2C);
	ascii modifCalledNb                    :   terminated_by(0x2C);
	ascii origCallingNb                    :   terminated_by(0x2C);
	ascii modifCallingNb                   :   terminated_by(0x2C);
	ascii callInitTime                     :   terminated_by(0x2C);
	ascii callStartTime                    :   terminated_by(0x2C);
	ascii callEndTime                      :   terminated_by(0x2C);
	ascii callChargeableDur                :   int(base10), terminated_by(0x2C);
	ascii callAnsweredStatus               :   terminated_by(0x2C);
	ascii callDisconnectSrc                :   terminated_by(0x2C);
	ascii networkCallDisconnectReasonHeader:   terminated_by(0x2C);
	ascii intCallDisconnectReasonCode      :   terminated_by(0x2C);
	ascii networkCallDisconnectCause       :   terminated_by(0x2C);
	ascii servedCallLeg                    :   terminated_by(0x2C);
	ascii imsICID                          :   terminated_by(0x2C);
	ascii imsCallID                        :   terminated_by(0x2C);
	ascii pServedUser                      :   terminated_by(0x2C);
	ascii roSessionId                      :   terminated_by(0x2C);
	ascii negotiatedMedia1                 :   terminated_by(0x2C);
	ascii negotiatedMedia2                 :   terminated_by(0x2C);
	ascii clearCode                        :   terminated_by(0x2C);
	ascii longCallCdrInd                   :   int(base10), terminated_by(0x2C);
	ascii pVisitedNetworkId                :   terminated_by(0x2C);
	ascii pAccessNetworkInfo               :   terminated_by(0x2C);
	ascii nbPortabilityRouteInfo           :   terminated_by(0x2C);
	ascii enterpriseId                     :   terminated_by(0x2C);
	ascii cugId                            :   terminated_by(0x2C);
	ascii cugType                          :   terminated_by(0x2C);
	ascii reqUriTgrpId                     :   terminated_by(0x2C);
	ascii contactHeaderTgrpId              :   terminated_by(0x2C);
	ascii callFwdIndicator                 :   int(base10), terminated_by(0x2C);
	ascii callFwdType                      :   terminated_by(0x2C);
	ascii callFwdAssociatedPartyAddr       :   terminated_by(0x2C);
	ascii nbOfCallFwdDiversions            :   terminated_by(0x2C);
	ascii confIndicator                    :   terminated_by(0x2C);
	ascii confCorrId                       :   terminated_by(0x2C);
	ascii onNetOffNetCallInd               :   terminated_by(0x2C);
    ascii pilotNumber                      :   terminated_by(0x2C);
    ascii serviceType                      :   int(base10), terminated_by(0x2C);
    ascii callCUGClassIdentification       :   terminated_by(0x2C);
    ascii outgoingCallIndicator            :   terminated_by(0x2C);
    ascii callSetupResult                  :   terminated_by(0x2C);
    ascii callSetupTime                    :   terminated_by(0x2C);
    ascii callDisconnectDirection          :   terminated_by(0x2C);
    ascii callMediaType                    :   int(base10), terminated_by(0x2C);
    ascii byteInviteTimeDiff               :   terminated_by(0x2C);
    ascii callSetupTimeDuration            :   terminated_by(0x2C);
    ascii circleName                       :   terminated_by(0x2C);
    ascii reservedField1                   :   terminated_by(0x2C);
    ascii reservedField2                   :   terminated_by(0x2C);
    ascii reservedField3                   :   terminated_by(0x2C);
    ascii reservedField4                   :   terminated_by(0x2C);
    ascii threeGppChargingId               :   terminated_by(0x2C);
    ascii imei                             :   terminated_by(0x2C);
    ascii imsi                             :   terminated_by(0x2C);
    ascii userSubcriberType                :   terminated_by(0x2C);
    ascii callHolderCounter                :   terminated_by(0x2C);
    ascii sip_Header                       :   terminated_by(0x2C);
    ascii reservedField5                   :   terminated_by(0x2C);
    ascii paniHeader                       :   terminated_by(0x2C);
    ascii to_Header                        :   terminated_by(0x2C);
    ascii pai                              :   terminated_by(0x2C);
    ascii msrn                             :   terminated_by(0x2C);
    ascii callFlag                         :   int(base10), terminated_by(0x2C);
    
    //Added as part of CDR doc v2.4
    ascii callCdrCounter                   :   int(base10),terminated_by(0x2C);
    ascii finalCdrIndicator                :   int(base10),terminated_by(0x2C); 
    
    ascii sessionPriority                  :   terminated_by(0x2C);
    
    //Added as part of CDR doc v2.5
    ascii volteSubsHomeDomain              :   terminated_by(0x2C); 
    
    ascii impi                             :   terminated_by(0xA); 
};

in_map errorBlockCTASV20_InMap : external (errorBlockCTAS_V20), target_internal(errorBlockCTAS_V20){automatic;};

in_map CTASV200_InMap : external (CTAS_V200), target_internal(CTAS_V200){
   automatic {
        errorBlockCTAS_V20 : using in_map Error_Map;
    };
};


internal CTAS_UDR
 {   
    string recordType;
    string recSeqNum;
    int causeForTermination;
    long chargingStartTimeForDup;
    string chargingEndTime;
    string chargingStartTime;
    int intermediateChargingInd;
    int intermediateRecordNumber;
    int intermediateChrgCause;
    string locRoutingNumber;  
    int duration; 
    string subsFirstMccMnc;
    string firstCellID;
    string subsLastMccMnc;
    string lastCellID;
    string Imsi;
    string imei;
    string basicServiceType;
    string sFinalProduct;
    string sCallReferenceTime;
    string sICID;
    string HomeCircle;
    boolean isSkipForTASBI;
    string ratType;
    string normalizedCallingNumber;
    string normalizedCalledNumber;
    string normalizedOrigCallingNumber;
    string normalizedRequestedPartyNumber;
    string callingNumberProductGroup;
    string calledNumberProductGroup;
    string custVisitingInfoCircle;
    string custVisitingInfoOperator;
    string custVisitingInfoZone;
    boolean isCustVisitInfoSuccess;
    string custHomeInfoCircle;
    string custHomeInfoOperator;
    string custHomeInfoZone;
    boolean isCustHomeInfoSuccess;
    string custLRNInfoCircle;
    string custLRNInfoOperator;
    string custLRNInfoZone;
    boolean isLRNInfoSuccess;
    string sBProduct;
    string sAProduct;
    string operatorInfo;
    string callLocationType;
    string callHomeRoamCircleInfo;
    boolean performLRNLookup;
    boolean isUnmaturedCall;
    string callingLRN;
    string sdcaInfo;
    string wlnWlsInfo;
    string translatedNumber;
    string accessNetworkInfo;
    string sSubBICallingNumber;
    string iMSVisitedNetworkIdentifier;
    string firstRoamingCircleID;
    string sBIRecordType;
    string sRsnCode;
    string causeForForward;
    string otherPartyOperator;
    string otherPartyCircle;
    string onlineChargingFailure;
    string end_user_nai;
    string sDuplicateKey;
    string sLastPaniHeader;
    string sCallAnsweredStatus;
    boolean isVoWifi;
    boolean isVoLTE;
    string clearCode;
    drudr origRec;
    
    
};

out_map CTASV200_OutMap : external (CTAS_V200), internal(CTAS_V200){automatic;};
encoder CtasV20_Enc : out_map(CTASV200_OutMap);
decoder  ctasv20 : in_map(CTASV200_InMap);
//CTAS cdr decoder ends


external errorBlockCTAS_V20: identified_by(strStartsWith(errorCode, "MOC")|| strStartsWith(errorCode, "MTC") || strStartsWith(errorCode, "FORW")) {
    ascii errorCode        : terminated_by(",");
    ascii errorMessage     : terminated_by(",");
};

in_map Error_Map : external(errorBlockCTAS_V20),target_internal(ErrorBlock) {
    automatic;
};

internal callingNumberFilter {
    boolean sendToIntec;    
    boolean sendToBI;
    string outputType;
    string outputCode;
    string reasonCode;
};

internal maxMinFieldInternal
{
    long chargingStartTime;
    long chargingEndTime;
    int intermediateRecordNumber;
    string subsLastExId;
    int intermediateChrgCause;
    int causeForTermination;
    string basicServiceType;
    string subsFirstMccMnc;
    int firstRecNum;
    int lastRecNum;
    int duration;
    string lastCellID;
};

session Aggregation_Session
{

    boolean   lastPartialReceived;
    long      NumberOfPartials;
    long      currentCount;
    long      duration;
    CTAS_UDR  internalUDR;
};


external CSVExternal
{
    ascii Field1  : terminated_by(",");
    ascii Field2  : terminated_by(",");
    ascii Field3  : terminated_by(",");
    ascii Field4  : terminated_by(",");
    ascii Field5  : terminated_by(",");
    ascii Field6  : terminated_by(",");
    ascii Field7  : terminated_by(",");
    ascii Field8  : terminated_by(",");
    ascii Field9  : terminated_by(",");
    ascii Field10 : terminated_by(",");
    ascii Field11 : terminated_by(",");
    ascii Field12 : terminated_by(",");
    ascii Field13 : terminated_by(",");
    ascii Field14 : terminated_by(",");
    ascii Field15 : terminated_by(",");
    ascii Field16 : terminated_by(",");
    ascii Field17 : terminated_by(",");
    ascii Field18 : terminated_by(",");
    ascii Field19 : terminated_by(",");
    ascii Field20 : terminated_by(0xA);
    
};

in_map csv_im : external (CSVExternal) , target_internal(CSV_TI){
	automatic;
};

out_map csv_om : external (CSVExternal) , internal(CSV_TI){
	automatic;
};

decoder CSBV_Decoder : in_map (csv_im);

encoder CSV_Encoder : out_map(csv_om);


internal SearchNode {
    int minLength;
    string regEx;
    map<string, SearchNode> NextNode;
    map<string, map<string,any>> colValues;
};