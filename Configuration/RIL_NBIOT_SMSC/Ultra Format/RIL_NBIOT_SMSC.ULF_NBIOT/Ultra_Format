<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!DOCTYPE exportmultiplex SYSTEM "jar:/mz/dtd/export_multiplex.dtd">
<exportmultiplex category="Ultra_Format" ref_path="ultra_format[Internal]/storable[ultra_format]/storable[Data]">
   <string name="Definition"><![CDATA[ external nbiot_ext : terminated_by(0xA){
     set {
        errorBlocknbiot errNbiot : optional;  
    };
    ascii seqNum              : terminated_by(",");
    ascii timeStampSubmit     : terminated_by(",");
    ascii timeStampDelivery   : terminated_by(",");
    ascii cdrType             : terminated_by(",");
    ascii reqType             : terminated_by(",");
    ascii msgSegType          : terminated_by(",");
    ascii msgIdentifier       : terminated_by(",");
    ascii ANumber             : terminated_by(",");
    ascii BNumber             : terminated_by(",");
    ascii pVisitedNetworkId   : terminated_by(",");
    ascii correlationId       : terminated_by(",");
    ascii protocolId          : terminated_by(",");
    ascii imsChargingId       : terminated_by(",");
    ascii sessionId           : terminated_by(",");
    ascii ofcs                : terminated_by(",");        
    ascii numOfAttempts       : terminated_by(",");
    ascii respFromMnpDip      : terminated_by(",");
    ascii diaResultCode       : terminated_by(",");
    ascii pAccessNetworkInfo  : terminated_by(",");
    ascii roamGT              : terminated_by(",");
    ascii valPeriodOfSms      : terminated_by(",");
    ascii lrn                 : terminated_by(",");
    ascii imei                : terminated_by(",");
    ascii callId              : terminated_by(",");
    ascii sriResponse         : terminated_by(",");
    ascii deliveryResponse    : terminated_by(",");  
    ascii mtResponse          : terminated_by(",");
    ascii submitSmResponse    : terminated_by(",");
    ascii spamFound           : terminated_by(",");
    ascii spamType            : terminated_by(",");
    ascii currentPartial      : terminated_by(",");
    ascii totalPartial        : terminated_by(",");
    ascii homeGT              : terminated_by(",");
    ascii smscAddress         : terminated_by(",");
    ascii OriginatingImsi     : terminated_by(",");
    ascii deliveryStatus      : terminated_by(",");
    ascii sourceAccountId     : terminated_by(",");
    ascii errorCode           : terminated_by(",");
    ascii LengthSms           : terminated_by(",");
    ascii DestiAccId          : terminated_by(",");
    ascii Reserved1           : terminated_by(",");
    ascii Reserved2           : terminated_by(",");
    ascii Reserved3           : terminated_by(",");
    ascii Reserved4           : terminated_by(",");
    ascii Reserved5           : terminated_by(",");
    ascii Reserved6           : terminated_by(",");
    ascii Reserved7           : terminated_by(",");
    ascii Reserved8           : terminated_by(",");
    ascii Reserved9           : terminated_by(",");
    ascii Reserved10          : terminated_by(",");
    ascii Reserved11          : terminated_by(0xA);
        
};

in_map errorBlocknbiot_InMap : external (errorBlocknbiot), target_internal(errorBlocknbiot){automatic;};


in_map nbiot_in_map : external(nbiot_ext),target_internal(nbiot_target_internal)
{
    automatic{
        errorBlocknbiot : using in_map Error_Map;
        
    };
};

out_map nbiot_OutMap : external (nbiot_ext), internal(nbiot_target_internal){automatic;};
encoder nbiot_Enc : out_map(nbiot_OutMap);
decoder dec_nbiot : in_map(nbiot_in_map);
//nbiot cdr decoder ends

external errorBlocknbiot : identified_by(strStartsWith(errorCode, "DRP")|| strStartsWith(errorCode, "ERR")) {
     ascii errorCode          : terminated_by(",");
     ascii errorMessage       : terminated_by(",");
 };

in_map Error_Map : external(errorBlocknbiot),target_internal(ErrorBlock) {
     automatic;
 };


internal nbiotInternal{
    string  sANum;
    string  sBNum;
    string  sSmscAddress;
    string  sCdrLegType;
    long    chargingStartTimeForDup;
    drudr origRec;
    string iCID;
    string currentPartial;
    nbiot_target_internal targetUdr;
    
};
]]></string>
   <boolean name="IsValid" value="true"/>
</exportmultiplex>
