<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!DOCTYPE exportmultiplex SYSTEM "jar:/mz/dtd/export_multiplex.dtd">
<exportmultiplex category="Ultra_Format" ref_path="ultra_format[Internal]/storable[ultra_format]/storable[Data]">
   <string name="Definition"><![CDATA[/***************
 * Modification History:
 * Date         Modification
 * 12-Mar-15    PGW, IMS, ALLOWANCE Ext modified
****************/
import RIL_MGCF.ULF_GENBAND_ASCII;
import RIL_SPECTRUM.ULF_Spectrum_Common;
import RIL_SMSC.ULF_SMSC;

external PGW_Header {
	ascii SUBPROCESS : terminated_by(","), encode_value("SUBPROCESS");
	ascii BITTYPE : terminated_by(","), encode_value("BITTYPE");
	ascii BIT_AMOUNT : terminated_by(","), encode_value("BIT_AMOUNT");
	ascii BIT_QUANTITY : terminated_by(","), encode_value("BIT_QUANTITY");
	ascii BITTIME_FROM : terminated_by(","), encode_value("BITTIME_FROM");
	ascii BITTIME_TO : terminated_by(","), encode_value("BITTIME_TO");
	ascii PA8121_POS_ID1 : terminated_by(","), encode_value("PA8121_POS_ID1");
    ascii ZZBAL_IDENT : terminated_by(","), encode_value("ZZBAL_IDENT");
	ascii ZZBIT_AMOUNT : terminated_by(","), encode_value("ZZBIT_AMOUNT");
	ascii ZZCORRELATION_ID : terminated_by(","), encode_value("ZZCORRELATION_ID");
	ascii ZZDURATION : terminated_by(","), encode_value("ZZDURATION");
	ascii ZZFILE_NAME : terminated_by(","), encode_value("ZZFILE_NAME");
	ascii ZZRATING_GROUP : terminated_by(","), encode_value("ZZRATING_GROUP");
	ascii ZZREQ_DURATI_SEC : terminated_by(","), encode_value("ZZREQ_DURATI_SEC");
	ascii ZZSERVICE_ID : terminated_by(","), encode_value("ZZSERVICE_ID");
	ascii ZZSERVICE_NAME : terminated_by(","), encode_value("ZZSERVICE_NAME");
	ascii ZZTRANS_SUB_TYPE : terminated_by(","), encode_value("ZZTRANS_SUB_TYPE");
	ascii ZZROAMING_IND : terminated_by(","), encode_value("ZZROAMING_IND");
    ascii remainingFields : terminated_by(0xA);//, encode_value("REMAINING_FIELDS");
    ascii originalHeader : terminated_by(0xA);//, encode_value("ORIGINAL_HEADER");

};
external PGW_Ext {
	ascii SUBPROCESS : terminated_by(",");
	ascii BITTYPE : terminated_by(",");
	ascii BIT_AMOUNT : terminated_by(","),float;
	ascii BIT_QUANTITY : terminated_by(",");//,float;
	ascii BITTIME_FROM : terminated_by(",");
	ascii BITTIME_TO : terminated_by(",");
	ascii PA8121_POS_ID1 : terminated_by(",");       
    ascii ZZBAL_IDENT : terminated_by(",");
	ascii ZZBIT_AMOUNT : terminated_by(","),float;
	ascii ZZCORRELATION_ID : terminated_by(",");
	ascii ZZDURATION : terminated_by(","),float;
	ascii ZZFILE_NAME : terminated_by(",");
	ascii ZZRATING_GROUP : terminated_by(","), float;
	ascii ZZREQ_DURATI_SEC : terminated_by(","),float;
	ascii ZZSERVICE_ID : terminated_by(",");
	ascii ZZSERVICE_NAME : terminated_by(",");
	ascii ZZTRANS_SUB_TYPE : terminated_by(",");
	ascii ZZROAMING_IND : terminated_by(",");
    ascii remainingFields : terminated_by(0xA);
};
//This will discard the header
in_map PGW_Header_InMap : external(PGW_Header), target_internal(PGW_header_TI){
    automatic;
};

out_map PGW_Header_OutMap : external(PGW_Header), internal(PGW_header_TI){
    automatic;
};

decoder PGW_Header_Dec : in_map(PGW_Header_InMap);
encoder PGW_Header_Enc : out_map(PGW_Header_OutMap);

in_map PGW_InMap : external(PGW_Ext), internal(errorTI), target_internal(PGW_Ext_TI){
    automatic;
};

out_map PGW_OutMap : external(PGW_Ext),internal(PGW_Ext_TI){
    automatic;
};

decoder PGW_Body_Dec : in_map(PGW_InMap);

decoder PGW_Dec {
    decoder PGW_Header_Dec ;
    decoder PGW_Body_Dec  *;
};


//decoder PGW_Dec : in_map(PGW_Header_InMap), in_map(PGW_InMap);

encoder PGW_Enc : out_map(PGW_Header_OutMap), out_map(PGW_OutMap);

external IMS_Header {// : identified_by(ZZBEARER_ID == "ZZBEARER_ID:string"){
	ascii SUBPROCESS : terminated_by(","), encode_value("SUBPROCESS");
	ascii BITTYPE : terminated_by(","), encode_value("BITTYPE");
	ascii BIT_AMOUNT : terminated_by(","), encode_value("BIT_AMOUNT");
	ascii BIT_QUANTITY : terminated_by(","), encode_value("BIT_QUANTITY");
	ascii BITTIME_FROM : terminated_by(","), encode_value("BITTIME_FROM");
	ascii BITTIME_TO : terminated_by(","), encode_value("BITTIME_TO");
	ascii PA8121_POS_ID1 : terminated_by(","), encode_value("PA8121_POS_ID1");
    ascii ZZBAL_IDENT : terminated_by(","), encode_value("ZZBAL_IDENT");
	ascii ZZBIT_AMOUNT : terminated_by(","), encode_value("ZZBIT_AMOUNT");
	ascii ZZCORRELATION_ID : terminated_by(","), encode_value("ZZCORRELATION_ID");
	ascii ZZDURATION : terminated_by(","), encode_value("ZZDURATION");
	ascii ZZFILE_NAME : terminated_by(","), encode_value("ZZFILE_NAME");
	ascii ZZRATING_GROUP : terminated_by(","), encode_value("ZZRATING_GROUP");
	ascii ZZREQ_DURATI_SEC : terminated_by(","), encode_value("ZZREQ_DURATI_SEC");
	ascii ZZSERVICE_ID : terminated_by(","), encode_value("ZZSERVICE_ID");
	ascii ZZSERVICE_NAME : terminated_by(","), encode_value("ZZSERVICE_NAME");
	ascii ZZTRANS_SUB_TYPE : terminated_by(","), encode_value("ZZTRANS_SUB_TYPE");
	ascii ZZROAMING_IND : terminated_by(","), encode_value("ZZROAMING_IND");
    ascii remainingFields : terminated_by(0xA);//, encode_value("REMAINING_FIELDS");
    ascii originalHeader : terminated_by(0xA);//, encode_value("ORIGINAL_HEADER");
};

external IMS_Ext{// : identified_by(ZZSERVICE_TYPE == "Z0003"){
    //ascii version : terminated_by(","); //2                   
    //ascii ZEC003 : terminated_by(",");                        
	ascii SUBPROCESS : terminated_by(",");
	ascii BITTYPE : terminated_by(",");
	ascii BIT_AMOUNT : terminated_by(","),float;
	ascii BIT_QUANTITY : terminated_by(",");//,float;
	ascii BITTIME_FROM : terminated_by(",");
	ascii BITTIME_TO : terminated_by(",");
	ascii PA8121_POS_ID1 : terminated_by(",");       
    ascii ZZBAL_IDENT : terminated_by(",");
	ascii ZZBIT_AMOUNT : terminated_by(","),float;
	ascii ZZCORRELATION_ID : terminated_by(",");
	ascii ZZDURATION : terminated_by(","),float;
	ascii ZZFILE_NAME : terminated_by(",");
	ascii ZZRATING_GROUP : terminated_by(","), float;
	ascii ZZREQ_DURATI_SEC : terminated_by(","),float;
	ascii ZZSERVICE_ID : terminated_by(",");
	ascii ZZSERVICE_NAME : terminated_by(",");
	ascii ZZTRANS_SUB_TYPE : terminated_by(",");
	ascii ZZROAMING_IND : terminated_by(",");
    ascii remainingFields : terminated_by(0xA);
};

in_map IMS_Header_InMap : external(IMS_Header), target_internal(IMS_header_TI){
    automatic;
};

out_map IMS_Header_OutMap : external(IMS_Header), internal(IMS_header_TI){
    automatic;
};

decoder IMS_Header_Dec : in_map(IMS_Header_InMap);
encoder IMS_Header_Enc : out_map(IMS_Header_OutMap);


in_map IMS_InMap : external(IMS_Ext),  internal(errorTI), target_internal(IMS_Ext_TI){
    automatic;
};

out_map IMS_OutMap : external(IMS_Ext),internal(IMS_Ext_TI){
    automatic;
};

decoder IMS_Body_Dec : in_map(IMS_InMap);

encoder IMS_Body_Enc : out_map(IMS_OutMap);

decoder IMS_Dec{
    decoder IMS_Header_Dec;
    decoder IMS_Body_Dec *;
};

encoder IMS_Enc : out_map(IMS_Header_OutMap), out_map(IMS_OutMap);

external Allowance_Header {
    ascii VERSION : terminated_by(","), encode_value("version");
	ascii SUBPROCESS : terminated_by(","), encode_value("SUBPROCESS");
	ascii BITTYPE : terminated_by(","), encode_value("BITTYPE");
	ascii BIT_AMOUNT : terminated_by(","), encode_value("BIT_AMOUNT");
	ascii BIT_QUANTITY : terminated_by(","), encode_value("BIT_QUANTITY");
	ascii BITTIME_FROM : terminated_by(","), encode_value("BITTIME_FROM");
	ascii BITTIME_TO : terminated_by(","), encode_value("BITTIME_TO");
	ascii PA8121_POS_ID1 : terminated_by(","), encode_value("PA8121_POS_ID1");
    ascii ZZBAL_IDENT : terminated_by(","), encode_value("ZZBAL_IDENT");
	ascii ZZBIT_AMOUNT : terminated_by(","), encode_value("ZZBIT_AMOUNT");
	ascii ZZCORRELATION_ID : terminated_by(","), encode_value("ZZCORRELATION_ID");
	ascii ZZDURATION : terminated_by(","), encode_value("ZZDURATION");
	ascii ZZFILE_NAME : terminated_by(","), encode_value("ZZFILE_NAME");
	ascii ZZRATING_GROUP : terminated_by(","), encode_value("ZZRATING_GROUP");
	ascii ZZREQ_DURATI_SEC : terminated_by(","), encode_value("ZZREQ_DURATI_SEC");
	ascii ZZSERVICE_ID : terminated_by(","), encode_value("ZZSERVICE_ID");
	ascii ZZSERVICE_NAME : terminated_by(","), encode_value("ZZSERVICE_NAME");
	ascii ZZTRANS_SUB_TYPE : terminated_by(","), encode_value("ZZTRANS_SUB_TYPE");
	ascii ZZROAMING_IND : terminated_by(","), encode_value("ZZROAMING_IND");
    ascii remainingFields : terminated_by(0xA);//, encode_value("REMAINING_FIELDS");
    ascii originalHeader : terminated_by(0xA);//, encode_value("ORIGINAL_HEADER");
};

external Allowance_Header2 : identified_by( strStartsWith( version, "version" ) ) {
    ascii version : terminated_by(",");
    ascii remainingFields : terminated_by(0xA);//, encode_value("REMAINING_FIELDS");
    //ascii originalHeader : terminated_by(0xA);//, encode_value("ORIGINAL_HEADER");
};
external Allowance_Ext_Partial : identified_by(BITTYPE == "Z902" || BITTYPE == "Z904" || BITTYPE == "Z712" || BITTYPE == "Z931" || BITTYPE == "Z932" || BITTYPE == "Z933" || BITTYPE == "Z934" || BITTYPE == "Z941" || BITTYPE == "Z942" || BITTYPE == "Z943" || BITTYPE == "Z944" || BITTYPE == "Z945" || BITTYPE == "Z952" || BITTYPE == "Z953" || BITTYPE == "Z954" || BITTYPE == "Z955" || BITTYPE == "Z956"){
//ascii version2 : terminated_by(",");
//ascii ZAR001 : terminated_by(",");
ascii CC_ITEM_INDEX : terminated_by(","),float;
ascii SRCTATYPE : terminated_by(",");
ascii SRCTAID : terminated_by(",");
ascii SUBPROCESS : terminated_by(",");
ascii BITTYPE : terminated_by(",");
bytearray remainingFields : terminated_by(0xA);
};

external Allowance_Ext : identified_by( !strStartsWith( SUBPROCESS, "version" )){
//ascii version2 : terminated_by(",");
//ascii ZAR001 : terminated_by(",");
	ascii SUBPROCESS : terminated_by(",");
	ascii BITTYPE : terminated_by(",");
	ascii BIT_AMOUNT : terminated_by(","),float;
	ascii BIT_QUANTITY : terminated_by(",");//,float;
	ascii BITTIME_FROM : terminated_by(",");
	ascii BITTIME_TO : terminated_by(",");
	ascii PA8121_POS_ID1 : terminated_by(",");       
    ascii ZZBAL_IDENT : terminated_by(",");
	ascii ZZBIT_AMOUNT : terminated_by(","),float;
	ascii ZZCORRELATION_ID : terminated_by(",");
	ascii ZZDURATION : terminated_by(","),float;
	ascii ZZFILE_NAME : terminated_by(",");
	ascii ZZRATING_GROUP : terminated_by(","), float;
	ascii ZZREQ_DURATI_SEC : terminated_by(","),float;
	ascii ZZSERVICE_ID : terminated_by(",");
	ascii ZZSERVICE_NAME : terminated_by(",");
	ascii ZZTRANS_SUB_TYPE : terminated_by(",");
	ascii ZZROAMING_IND : terminated_by(",");
	ascii PPACC : terminated_by(",");
	ascii BITTIME : terminated_by(",");
    ascii ZZSERVICE_TYPE : terminated_by(",");
    ascii GSBER : terminated_by(",");
    ascii SEGMT : terminated_by(",");
    ascii PRCTR : terminated_by(",");
    ascii BIT_QTY_UNIT : terminated_by(",");
    ascii ZZTRANS_ID : terminated_by(",");
    ascii remainingFields : terminated_by(0xA);
};

in_map Allowance_Header_InMap : external(Allowance_Header), target_internal(Allowance_header_TI){
    automatic;
};

out_map Allowance_Header_OutMap : external(Allowance_Header), internal(Allowance_header_TI){
    automatic;
};

decoder Allownce_Header_Dec : in_map(Allowance_Header_InMap);
encoder Allowance_Header_Enc : out_map(Allowance_Header_OutMap);

in_map Allowance_Header_InMap2 : external(Allowance_Header2), target_internal(Allowance_header_TI2){
    automatic;
};

decoder Allownce_Header_Dec2 : in_map(Allowance_Header_InMap2);

in_map Allowance_InMap : external(Allowance_Ext), internal(errorTI), target_internal(Allowance_Ext_TI){
    automatic;
};

out_map Allownace_OutMap : external(Allowance_Ext),internal(Allowance_Ext_TI){
    automatic;
};

decoder Allowance_Body_Dec : in_map(Allowance_InMap);

decoder Allowance_Dec2 : in_map(Allowance_Header_InMap2),in_map(Allowance_InMap);
decoder Allowance_Dec{
    decoder Allownce_Header_Dec;
    decoder Allowance_Body_Dec *;
};

encoder Allowance_Enc : out_map(Allowance_Header_OutMap), out_map(Allownace_OutMap);

in_map AllowancePart_InMap : external(Allowance_Ext_Partial), internal(errorTI), target_internal(Allowance_Ext_Part_TI){
    automatic;
};

out_map AllownacePart_OutMap : external(Allowance_Ext_Partial),internal(Allowance_Ext_Part_TI){
    automatic;
};

decoder AllowancePart_Body_Dec : in_map(AllowancePart_InMap);

decoder AllowancePart_Dec{
    decoder Allownce_Header_Dec;
    decoder AllowancePart_Body_Dec *;
};
encoder AllowancePart_Enc : out_map(Allowance_Header_OutMap), out_map(AllownacePart_OutMap);

encoder Common_Encoder : out_map(PGW_Header_OutMap), out_map(PGW_OutMap), out_map(IMS_Header_OutMap), out_map(Allowance_Header_OutMap), out_map(IMS_OutMap), out_map(Allownace_OutMap), out_map(Common_Reprocess_outMap),out_map(contentGenBand_OutMap), out_map(interConnectFormat_OutMap);

/*
decoder Common_Decoder: in_map(Allowance_InMap),in_map(IMS_InMap), in_map(PGW_InMap), in_map(PGW_Header_InMap), in_map(contentGenBand_imap_spectrum);
*/
decoder Common_Decoder{
    decoder PGW_Dec *;
    decoder Allowance_Dec *;
    decoder IMS_Dec *;
   // decoder inContentFormatGenBand_sptrm_Dec *;
    decoder interConnectFormat_Spectrum_Dec *;
    decoder Common_Reprocess_Dec *;
};

//internal
//common internal
internal allUDRInfo{
    string msisdn;
    string spectrum;
    long splitDuration;
    long totalDuration;
    date startDate;
    date endDate;
    int splitAmount;
    int totalAmount;
    int totalQuantity;
    int splitQuantity;
    int splitActl_byts2chge;
    int totalActl_byts2chge;
    int splitBalance_after;
    int totalBalance_after;
    int splitBalance_before;
    int totalBalance_before;
    int splitZZBit_amount;
    int totalZZBit_amount;
    int totalZZreq_dl_byt;
    int splitZZreq_dl_byt;
    int splitZZreq_durati_sec;
    int totalZZreq_durati_sec;
    int splitZZreq_total_byt;
    int totalZZreq_total_byt;
    int splitZZreq_ul_byt;
    int totalZZreq_ul_byt;
    int splitTransc_QTY;
    int totalTransc_QTY;
};

external PGW_Ext_Rcy : identified_by(type == "PGW"){
    ascii type : terminated_by(",");
    PGW_Ext ims;
};

in_map PGW_Ext_Rcy_inMap : external(PGW_Ext_Rcy), target_internal(PGW_Ext_Rcy){
    automatic{
        PGW_Ext : using in_map PGW_InMap;
    };
};

external IMS_Ext_Rcy : identified_by(type == "IMS"){
    ascii type : terminated_by(",");
    IMS_Ext ims;
};

in_map IMS_Ext_Rcy_inMap : external(IMS_Ext_Rcy), target_internal(IMS_Ext_Rcy){
    automatic{
        IMS_Ext : using in_map IMS_InMap;
    };

};

external Allownace_Ext_Rcy : identified_by(type == "Allowance"){
    ascii type : terminated_by(",");
    Allowance_Ext allowance;
};

in_map Allowance_Ext_Rcy_inMap : external(Allownace_Ext_Rcy), target_internal(Allownace_Ext_Rcy){
    automatic{
        Allowance_Ext : using in_map Allowance_InMap;
    };
};

external Common_Reprocess : identified_by(strStartsWith(recordType,"RCY")){
    ascii recordType : terminated_by(",");
    ascii creationTime : terminated_by(",");
    ascii updateTime : terminated_by(",");
    ascii retryCnt : terminated_by(","),int(base10);
    //inContentFormat_GenBand_Spectrum mgcfReprocess;
    set{
        Allowance_Header_Rcy allHeader : optional;
        IMS_Header_Rcy imsHeader : optional;
        PGW_Ext_Rcy pgwRcy : optional;
        IMS_Ext_Rcy imsRcy : optional;
        Allownace_Ext_Rcy allownaceRcy : optional;
       // inContentFormat_GenBand_Spectrum mgcfReprocess : optional;
       // interConnectFormat_Spectrum smsReprocess : optional;
    };
};


external Allowance_Header_Rcy : identified_by(allownceHeaderRecord == "Allowance_Header") {
    ascii allownceHeaderRecord : terminated_by(",");
    Allowance_Header header;
};
    
in_map Allowance_Header_Rcy_InMap :external(Allowance_Header_Rcy), target_internal(Allowance_Header_Rcy){
    automatic{
        Allowance_Header : using in_map Allowance_Header_InMap;
    };
};
out_map Allowance_Header_Rcy_OutMap : external(Allowance_Header_Rcy), internal(Allowance_Header_Rcy){automatic;};

decoder Allownace_Header_Rcy_Dec :in_map(Allowance_Header_Rcy_InMap);
encoder Allowance_Header_Rcy_Enc : out_map(Allowance_Header_Rcy_OutMap);


external IMS_Header_Rcy : identified_by(imsHeaderRecord == "IMS_Header") {
    ascii imsHeaderRecord : terminated_by(",");
    IMS_Header header;
};
    
in_map IMS_Header_Rcy_InMap :external(IMS_Header_Rcy), target_internal(IMS_Header_Rcy){
    automatic{
        IMS_Header : using in_map IMS_Header_InMap;
    };
};
out_map IMS_Header_Rcy_OutMap : external(IMS_Header_Rcy), internal(IMS_Header_Rcy){automatic;};

decoder IMS_Header_Rcy_Dec :in_map(IMS_Header_Rcy_InMap);
encoder IMS_Header_Rcy_Enc : out_map(IMS_Header_Rcy_OutMap);

in_map Common_Reprocess_inMap : external(Common_Reprocess), target_internal(Common_Reprocess_TI){
    automatic {
        Allowance_Header_Rcy : using in_map Allowance_Header_Rcy_InMap;
        IMS_Header_Rcy : using in_map IMS_Header_Rcy_InMap;
        PGW_Ext_Rcy : using in_map PGW_Ext_Rcy_inMap;
        IMS_Ext_Rcy : using in_map IMS_Ext_Rcy_inMap;
        Allownace_Ext_Rcy : using in_map Allowance_Ext_Rcy_inMap;
       // inContentFormat_GenBand_Spectrum : using in_map contentGenBand_imap_spectrum;
       // interConnectFormat_Spectrum : using in_map interConnectFormat_Spectrum_imap;
    };
};

out_map Common_Reprocess_outMap : external(Common_Reprocess), internal(Common_Reprocess_TI){
    automatic;
};

decoder Common_Reprocess_Dec : in_map(Common_Reprocess_inMap);
encoder Common_Reprocess_Enc : out_map(Common_Reprocess_outMap);


internal genericInternal{
    string msisdn;
    string spectrum;
    long splitDuration;
    long totalDuration;
    date startDate;
    date endDate;
    int splitAmount;
    int totalAmount;
    int totalQuantity;
    int splitQuantity;
    int splitActl_byts2chge;
    int totalActl_byts2chge;
    int splitBalance_after;
    int totalBalance_after;
    int splitBalance_before;
    int totalBalance_before;
    int splitZZBit_amount;
    int totalZZBit_amount;
    int totalZZreq_dl_byt;
    int splitZZreq_dl_byt;
    int splitZZreq_durati_sec;
    int totalZZreq_durati_sec;
    int splitZZreq_total_byt;
    int totalZZreq_total_byt;
    int splitZZreq_ul_byt;
    int totalZZreq_ul_byt;
    int splitTransc_QTY;
    int totalTransc_QTY;
};


external purging{
    ascii correlationId : terminated_by(",");
    ascii startDateTime : terminated_by(",");
    ascii msisdn : terminated_by(0xA);
    //ascii maxRecordDate : terminated_by(0xA);
};

in_map purging_inMap : external(purging), target_internal(purging_ti){
    automatic;
};

out_map purging_outMap : external(purging), internal(purging_ti){
    automatic;
};

decoder Purge_Dec : in_map(purging_inMap);

encoder Purge_Enc : out_map(purging_outMap);

internal pgwLookupResult{
    any input;
    list<spectrumPGWInfo> listSpectrum;
};

//#20150903_Added for Bit Quantity splitting
internal bitQuantity {
    double dBitQty;
    bigint biBitQty;
    bigint biBitQty1;
    bigint biBitQty2;
};

external bitRecon_Header {
    ascii fileName      : terminated_by(","), encode_value("FILENAME");
    ascii prepiad       : terminated_by(","), encode_value("PREPAID");
    ascii sourceSystem  : terminated_by(","), encode_value("SOURCE_SYSTEM");
    //ascii ciInstance    : terminated_by(","), encode_value("CI_INSTANCE");
    ascii bitClass      : terminated_by(","), encode_value("BIT_CLASS");
    ascii duration      : terminated_by(","), encode_value("DURATION");
    ascii reqDuration   : terminated_by(","), encode_value("REQ_DURATION");
    ascii bitQty        : terminated_by(","), encode_value("BIT_QTY");
    ascii bitAmount     : terminated_by(","), encode_value("BIT_AMOUNT");
    ascii bitCount      : terminated_by(","), encode_value("BIT_COUNT");
    ascii splitBitCount : terminated_by(","), encode_value("SPLIT_BIT_COUNT");
    ascii generationTime : terminated_by(0xA), encode_value("GENERATION_TIME");

};
external bitRecon_Ext {
    ascii fileName      : terminated_by(",");
    ascii prepaidFlag   : terminated_by(",");
    ascii sourceSystem  : terminated_by(",");
    //ascii ciInstance    : terminated_by(",");
    ascii bitClass      : terminated_by(",");
    ascii duration      : terminated_by(",");
    ascii reqDuration   : terminated_by(",");
    ascii bitQty        : terminated_by(",");
    ascii bitAmount     : terminated_by(",");
    ascii bitCount      : terminated_by(",");
    ascii splitBitCount : terminated_by(",");
    ascii generationTime : terminated_by(0xA);
};

in_map bitRecon_Header_InMap : external(bitRecon_Header), target_internal(bitRecon_header_TI){
    automatic;
};

out_map bitRecon_Header_OutMap : external(bitRecon_Header), internal(bitRecon_header_TI){
    automatic;
};

decoder bitRecon_Header_Dec : in_map(bitRecon_Header_InMap);
encoder bitRecon_Header_Enc : out_map(bitRecon_Header_OutMap);

in_map bitRecon_InMap : external(bitRecon_Ext), target_internal(bitRecon_Ext_TI){
    automatic;
};

out_map bitRecon_OutMap : external(bitRecon_Ext),internal(bitRecon_Ext_TI){
    automatic;
};

decoder bitRecon_Body_Dec : in_map(bitRecon_InMap);

decoder bitRecon_Dec {
    decoder bitRecon_Header_Dec ;
    decoder bitRecon_Body_Dec  *;
};

encoder bitRecon_Enc : out_map(bitRecon_Header_OutMap), out_map(bitRecon_OutMap);

encoder bitRecon_Body_Enc : out_map(bitRecon_OutMap);

internal RequestInternal {
    long requestTimeStamp;
    Allowance_Ext_TI allRec;
    
};

internal MGCFAgg {
    string incomingSwitch;
    string outgoingSwitch;
    string eventStartDate;
    string eventStartTime;
    bigint eventDuration;
    string aNum;
    string bNum;
    string incomingTrunk;
    string outgoingTrunk;
    string incomingProduct;
    string outgoingProduct;
    string eventDirection;
    string discreteRatingParam_1;
    string dataUnit;
    string recSeqNum;
    string recType;
    string userSummarization;
    string userData;
    string userData_2;
    string linkField;
    string lineFeed;
};


session MGCFSession {
    bigint totalCallDur;
    MGCFAgg udr;
};


external pospaidBits_Ext {
    ascii version           : terminated_by(",");
    ascii bitType           : terminated_by(",");
    ascii remainingFields   : terminated_by(0xA);
};

in_map pospaidBits_InMap : external(pospaidBits_Ext), target_internal(pospaidBits_TI){
    automatic;
};

out_map pospaidBits_OutMap : external(pospaidBits_Ext), internal(pospaidBits_TI){
    automatic;
};

decoder pospaidBits_Dec : in_map(pospaidBits_InMap);
encoder pospaidBits_Enc : out_map(pospaidBits_OutMap);]]></string>
   <boolean name="IsValid" value="true"/>
</exportmultiplex>
