<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!DOCTYPE exportmultiplex SYSTEM "jar:/mz/dtd/export_multiplex.dtd">
<exportmultiplex category="Ultra_Format" ref_path="ultra_format[Internal]/storable[ultra_format]/storable[Data]">
   <string name="Definition"><![CDATA[
/*********************BTAS CDR VERSION 1.0.5********************/

external BTAS_V105 : terminated_by(0xA){
    set {
        errorBlockBTAS_V5 errV5 : optional;  
    }; 
	ascii cdrGenNb                          :   int(base10),terminated_by(0x2C);
	ascii cdrVerNb                          :   terminated_by(0x2C);
	ascii siteName                          :   terminated_by(0x2C);
	ascii origCalledNb                      :   terminated_by(0x2C);
	ascii modifCalledNb                     :   terminated_by(0x2C);
	ascii origCallingNb                     :   terminated_by(0x2C);
	ascii modifCallingNb                    :   terminated_by(0x2C);
	ascii callInitTime                      :   terminated_by(0x2C);
	ascii callStartTime                     :   terminated_by(0x2C);
	ascii callEndTime                       :   terminated_by(0x2C);
	ascii callChargeableDur                 :   int(base10), terminated_by(0x2C);
	ascii callAnsweredStatus                :   terminated_by(0x2C);
	ascii callDisconnectSrc                 :   terminated_by(0x2C);
	ascii networkCallDisconnectReasonHeader : terminated_by(0x2C);
	ascii intCallDisconnectReasonCode       :   terminated_by(0x2C);
	ascii networkCallDisconnectCause        :   terminated_by(0x2C);
	ascii servedCallLeg                     :   terminated_by(0x2C);
	ascii imsICID                           :   terminated_by(0x2C);
	ascii imsCallID                         :   terminated_by(0x2C);
	ascii pServedUser                       :   terminated_by(0x2C);
	ascii roSessionId                       :   terminated_by(0x2C);
	ascii negotiatedMedia1                  :   terminated_by(0x2C);
	ascii negotiatedMedia2                  :   terminated_by(0x2C);
	ascii clearCode                         :   terminated_by(0x2C);
	ascii longCallCdrInd                    :   int(base10), terminated_by(0x2C);
	ascii pVisitedNetworkId                 :   terminated_by(0x2C);
	ascii pAccessNetworkInfo                :   terminated_by(0x2C);
	ascii nbPortabilityRouteInfo            :   terminated_by(0x2C);
	ascii enterpriseId                      :   terminated_by(0x2C);
	ascii cugId                             :   terminated_by(0x2C);
	ascii cugType                           :   int(base10), terminated_by(0x2C);
	ascii reqUriTgrpId                      :   terminated_by(0x2C);
	ascii contactHeaderTgrpId               :   terminated_by(0x2C);
	ascii callFwdIndicator                  :   int(base10), terminated_by(0x2C);
	ascii callFwdType                       :   int(base10), terminated_by(0x2C);
	ascii callFwdAssociatedPartyAddr        :   terminated_by(0x2C);
	ascii nbOfCallFwdDiversions             :   terminated_by(0x2C);
	ascii confIndicator                     :   terminated_by(0x2C);
	ascii confCorrId                        :   terminated_by(0x2C);
	ascii onNetOffNetCallInd                :   terminated_by(0x2C);
    ascii pilotNumber                       :   terminated_by(0x2C);
    ascii serviceType                       :   int(base10), terminated_by(0x2C);
    ascii callCUGClassIdentification        :   terminated_by(0x2C);
    ascii outgoingCallIndicator             :   terminated_by(0x2C);
    ascii callSetupResult                   :   terminated_by(0x2C);
    ascii callSetupTime                     :   terminated_by(0x2C);
    ascii callDisconnectDirection           :   terminated_by(0x2C);
    ascii callMediaType                     :   int(base10), terminated_by(0x2C);
    ascii byteInviteTimeDiff                :   terminated_by(0x2C);
    ascii callSetupTimeDuration             :   terminated_by(0x2C);
    ascii circleName                        :   terminated_by(0x2C);
    ascii reservedField1                    :   terminated_by(0x2C);
    ascii reservedField2                    :   terminated_by(0x2C);
    ascii reservedField3                    :   terminated_by(0x2C);
    ascii reservedField4                    :   terminated_by(0x2C);
    ascii reservedField5                    :   terminated_by(0x2C);
    ascii reservedField6                    :   terminated_by(0x2C);
    ascii reservedField7                    :   terminated_by(0x2C);
    ascii reservedField8                    :   terminated_by(0x2C);
    ascii callHolderCounter                 :   terminated_by(0x2C);
    ascii sip_Header                        :   terminated_by(0x2C);
    ascii reservedField9                    :   terminated_by(0x2C);
    ascii reservedField10                   :   terminated_by(0x2C);
    ascii to_Header                         :   terminated_by(0x2C);
    ascii PAI                               :   terminated_by(0x2C);
    ascii reservedField11                   :   terminated_by(0x2C);
    ascii callFlag                          :   terminated_by(0x2C);
    ascii reservedField12                   :   terminated_by(0x2C);
    ascii reservedField13                   :   terminated_by(0x2C);
    ascii reservedField14                   :   terminated_by(0x2C);
    ascii reservedField15                   :   terminated_by(0x2C);
    ascii reservedField16                   :   terminated_by(0xA);
};
in_map errorBlockBTASAll_InMap : external (errorBlockBTAS_V5), target_internal(errorBlockBTAS_V5){automatic;};
in_map BTASV105_InMap : external (BTAS_V105), target_internal(BTAS_TI){
   automatic {
        errorBlockBTAS_V5 : using in_map errorBlockBTASAll_InMap;
    };
};

out_map BTASV105_OutMap : external (BTAS_V105), internal(BTAS_TI){automatic;};
encoder BtasV5_Enc : out_map(BTASV105_OutMap);
decoder  btasv5 : in_map(BTASV105_InMap);


/*********************BTAS Internal CDR*******************/
internal BTAS_UDR {
 	
    string calledNb;
    string callingNb;
    int cdrGenNb;
    string cdrVerNb;
    string siteName;
    string normalizedCallingNumber;
    string normalizedCalledNumber ;
    string normalizedRequestedPartyNumber;
    string translatedNumber;
    string origCalledNb;
    string modifCalledNb;
    string origCallingNb;
    string modifCallingNb;
    string callInitTime;
    string callStartTime;
    string callEndTime;
    int callChargeableDur;
    string callAnsweredStatus;
    string callDisconnectSrc;
    string servedCallLeg;
    string imsICID;
    string imsCallID;
    string pServedUser;
    string roSessionId;
    string pVisitedNetworkId;
    string pAccessNetworkInfo;
    string nbPortabilityRouteInfo;
    int callFwdIndicator;
    string callFwdType;
    string callFwdAssociatedPartyAddr;
    string confIndicator;
    string onNetOffNetCallInd;
    string pilotNumber;
    string serviceType;
    string callDisconnectDirection;
    string callMediaType;
    string callSetupTimeDuration;
    string Lrn;         //added for bi
    string circleName;
    string BNumProd;
    BTAS_TI origrec; //error Block version 5
};



internal normalizeInfo
{
	int numberOfDigitsToRemove;
	string prefixString;
	string productGroup;
	string normalizedNumber;
};

decoder  btasBaseDecoder : in_map(BTASV105_InMap);
encoder  btasBaseEncoder : out_map(BTASV105_OutMap);
//BTAS cdr decoder ends


external CSVExternal
{
    ascii Recordtype  : terminated_by(",");
    ascii CallingNumber   : terminated_by(",");
    ascii CalledNumber  : terminated_by(",");
    ascii RequestedNumber  : terminated_by(",");
    ascii CallAssociatedNum : terminated_by(",");
    ascii pServedUser : terminated_by(",");
    ascii SessionId     :terminated_by(",");
    ascii MediaName  : terminated_by(",");
    ascii CallStartTime  : terminated_by(",");
    ascii CallEndTime  : terminated_by(",");
    ascii LRN  : terminated_by(",");
    ascii VisitedNetwork  : terminated_by(",");
    ascii AccessNetworkInfo : terminated_by(",");
    ascii CallDuration : terminated_by(",");
    ascii Circle  : terminated_by(",");
    ascii Imsi    : terminated_by(",");
    ascii ICID    : terminated_by(",");
    ascii IMEI    : terminated_by(","); 
    ascii recSeqNum : terminated_by(0xA);
    
    
};

in_map csv_im : external (CSVExternal) , target_internal(CSV_TI){
	automatic;
};

out_map csv_om : external (CSVExternal) , internal(CSV_TI){
	automatic;
};

decoder CSV_Decoder : in_map (csv_im);

encoder CSV_Encoder : out_map(csv_om);



internal Filename
{
    string sourceFileName;
};

external errorBlockBTAS_V5 : identified_by(strStartsWith(errorCode, "DRP") || strStartsWith(errorCode, "ERR")) {
    ascii errorCode        : terminated_by(",");
    ascii errorMessage     : terminated_by(",");
};
internal SearchNode {
    int minLength;
    string regEx;
    map<string, SearchNode> NextNode;
    map<string, map<string,any>> colValues;
};]]></string>
   <boolean name="IsValid" value="true"/>
</exportmultiplex>
