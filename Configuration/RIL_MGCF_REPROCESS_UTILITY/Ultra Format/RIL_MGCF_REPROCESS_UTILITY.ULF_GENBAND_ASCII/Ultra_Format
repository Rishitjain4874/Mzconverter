<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!DOCTYPE exportmultiplex SYSTEM "jar:/mz/dtd/export_multiplex.dtd">
<exportmultiplex category="Ultra_Format" ref_path="ultra_format[Internal]/storable[ultra_format]/storable[Data]">
   <string name="Definition"><![CDATA[//import RIL_SPECTRUM.ULF_Spectrum_Common;

//Header part
external File_Header_Ext{
    Filename filename;
    CreationTime freationTime;
    DctID fctID;
    DctVer dctVer;
    DctDef dctDef;
};

external Filename : identified_by(tag == "FILENAME") {
   ascii tag :  terminated_by("="), encode_value("FILENAME"), external_only;
   ascii value : terminated_by(0xA);
};

external CreationTime : identified_by(tag == "CREATION_TIME") {
    ascii tag :  terminated_by("="), encode_value("CREATION_TIME"), external_only;
    ascii value : terminated_by(0xA);
};

external DctID : identified_by(tag == "DCT_ID") {
    ascii tag :  terminated_by("="), encode_value("DCT_ID"), external_only;
    ascii value : terminated_by(0xA);
};


external DctVer : identified_by(tag == "DCT_VER") {
    ascii tag :  terminated_by("="), encode_value("DCT_VER"), external_only;
    ascii value : terminated_by(0xA);
};

external DctDef : identified_by(tag == "DCT_DEF") {
    ascii tag :  terminated_by("="), encode_value("DCT_DEF"), external_only;
    DctDefValue value;
};

external DctDefValue  {
    ascii CDR_TYPE : terminated_by(":");
    ascii DCT_NAME : terminated_by(":");
    ascii HAS_FILEHDR : terminated_by(":");
    ascii HAS_FILETRAILER : terminated_by(":");
    ascii HAS_RECHDR : terminated_by(":");
    ascii HAS_FIELDLABEL : terminated_by(":");
    ascii DELIMITERS : terminated_by(":");
    ascii ENUM_FMTTYPE : terminated_by(":");
    ascii FMT_METHOD : terminated_by(":");
    ascii trailingBytes :  terminated_by(0xA);
    --Column names not decoded, ignored...
};
//End of Header part

//VCDR starts
external errorBlock : identified_by(strStartsWith(errorCode, "DRP")) {
    ascii errorCode : terminated_by(",");
    ascii errorMessage : terminated_by(",");
};

external VCDR {
    set {
        errorBlock error : optional;
    };    
    VCDR_Ext vcdr;
};

//VCDR starts
external VCDR_Ext{
    ascii CDRSequenceNumber : terminated_by(","),long(base10);
    ascii CDRMajorVersion : terminated_by(","),int(base10);
    ascii CDRMinorVersion : terminated_by(","),int(base10);
    ascii LongCallDurationIndicator: terminated_by(","),int(base10);
    ascii OriginatingDateTime : terminated_by(","); //,long(base10);//date in unix format,type as long for indentification of dupUDR
    ascii AnswerDateTime : terminated_by(",");
    ascii DisconnectDateandTime : terminated_by(",");
    ascii CallingPartyID : terminated_by(",");
    ascii ChargeNumber : terminated_by(",");
    ascii DialedNumber : terminated_by(",");
    ascii CalledPartyID: terminated_by(",");
    ascii TranslatedNumber : terminated_by(",");
    ascii DigitType: terminated_by(",");
    ascii ServiceFeatureCode : terminated_by(",");
    ascii CallID : terminated_by(","),long(base10);
    ascii OrigIncomingSignals: terminated_by(",");//,long(base10);
    ascii OrigOutgoingSignals : terminated_by(",");//,long(base10);
    ascii TermIncomingSignals : terminated_by(",");//,long(base10);
    ascii TermOutgoingSignals : terminated_by(",");//,long(base10);
    ascii InternalReleaseCause: terminated_by(","),int(base10);
    ascii OrigSignalRelCause: terminated_by(","),long(base10);
    ascii TermInternalRelCause: terminated_by(","),int(base10);
    ascii TermSignalRelCause: terminated_by(","),int(base10);
    ascii TimeGuardFlag: terminated_by(",");
    ascii ShortCalledPartyOffhook: terminated_by(",");
    ascii OrignateCarrierTime : terminated_by(",");
    ascii CarrierConnectTime : terminated_by(",");
    ascii DisconnectDirection: terminated_by(",");
    ascii LongCallTime: terminated_by(",");
    ascii LastLongCallTime : terminated_by(","); //,long(base10);
    ascii ShortOnhookDuration : terminated_by(",");
    ascii OrigLineorTrunkType : terminated_by(","),int(base10);
    ascii OriginatingMG : terminated_by(","),int(base10);
    ascii OriginatingSpan : terminated_by(",");//,int(base10);
    ascii OriginatingChannel : terminated_by(","),int(base10);
    ascii OrigTrunkGroup : terminated_by(","),int(base10);
    ascii OrigTrunkGroupCircuitID : terminated_by(","),int(base10);
    ascii TermLineorTrunkType: terminated_by(","),int(base10);
    ascii TerminatingMG : terminated_by(","),int(base10);
    ascii TerminatingSpan : terminated_by(",");//,int(base10);
    ascii TerminatingChannel : terminated_by(","),int(base10);
    ascii TermTrunkGroup : terminated_by(","),int(base10);
    ascii TermTrunkGroupCircuitID : terminated_by(","),int(base10);
    ascii OrigTerminationType : terminated_by(",");
    ascii TermTerminationType : terminated_by(",");
    ascii OrigCarrierNetworkNo : terminated_by(",");
    ascii OrigRoutingIndicator : terminated_by(",");
    ascii OrigCarrierType : terminated_by(",");
    ascii OrigCarrierID : terminated_by(",");
    ascii TermCarrierNetworkNo : terminated_by(",");
    ascii TermRoutingIndicator : terminated_by(",");
    ascii TermCarrierType : terminated_by(",");
    ascii TermCarrierID : terminated_by(",");
    ascii OrigANICPNIndicator : terminated_by(",");
    ascii TermANICPNIndicator : terminated_by(",");
    ascii OrigScreeningClass : terminated_by(",");//,int(base10);
    ascii OrigSubscriberGroup : terminated_by(",");//,int(base10);
    ascii TermSubscriberGroup : terminated_by(",");//,int(base10);
    ascii AMATestCallIndicator : terminated_by(",");//,int(base10);
    ascii AMATranslationIndex : terminated_by(",");//,int(base10);
    ascii OrigAMACarrierIndex : terminated_by(",");//,int(base10);
    ascii OrigAMAProfileIndex : terminated_by(",");//,int(base10);
    ascii TermAMACarrierIndex : terminated_by(",");//,int(base10);
    ascii TermAMAProfileIndex : terminated_by(",");//,int(base10);
    ascii OrigLineInfo : terminated_by(",");
    ascii TermTandemTrunkGroup : terminated_by(",");//,int(base10);
    ascii FreephoneNumber : terminated_by(",");
    ascii CallType : terminated_by(","),int(base10);
    ascii TermCarrierSelectionInfo : terminated_by(",");
    ascii CarrierServiceArrangement : terminated_by(",");
    ascii OriginationLATA : terminated_by(","),int(base10);
    ascii TerminatingCountryCode : terminated_by(",");
    ascii BearerCapTransferCap : terminated_by(","), int(base10);
    ascii BearerCapCodeStandard : terminated_by(",");
    ascii BearerCapTransferRate : terminated_by(",");
    ascii BearerCapTransferMode : terminated_by(",");
    ascii CallerNumberPortedID : terminated_by(",");
    ascii CalledNumberPortedID : terminated_by(",");
    ascii OriginationLRN : terminated_by(",");
    ascii OrigLRNSource : terminated_by(",");
    ascii TerminationLRN : terminated_by(",");
    ascii TermLRNSource : terminated_by(",");
    ascii LNPDipIndication : terminated_by(",");
    ascii LastResort : terminated_by(",");
    ascii OrigCODECSource : terminated_by(",");
    ascii OrigCODECProfile : terminated_by(",");//,int(base10);
    ascii OrigCODECEntry : terminated_by(",");//,int(base10);
    ascii TermCODECSource : terminated_by(",");
    ascii TermCODECProfile : terminated_by(",");//,int(base10);
    ascii TermCODECEntry : terminated_by(",");//,int(base10);
    ascii EchoCancelRequestStatus : terminated_by(",");
    ascii OrigForwardCallIndicator : terminated_by(",");//,int(base10);
    ascii OrigBackwardCallIndicator : terminated_by(",");//,int(base10);
    ascii TermForwardCallIndicator : terminated_by(",");//,int(base10);
    ascii TermBackwardCallIndicator : terminated_by(",");//,int(base10);
    ascii OutpulsedNumber : terminated_by(","); //,long(base10);
    ascii PrefixDialedDigits : terminated_by(","),int(base10);
    ascii CallingPartyIndicator : terminated_by(","),int(base10);
    ascii OrigCountryCode : terminated_by(","),int(base10);
    ascii FinalSwitchID : terminated_by(",");//,int(base10);
    ascii CompleteCode : terminated_by(",");//,int(base10);
    ascii CalledPrefixDigit : terminated_by(","),int(base10);
    ascii AnswerType : terminated_by(","),int(base10);
    ascii QueuingIndicator : terminated_by(",");
    ascii OrigECindicator : terminated_by(",");
    ascii TermECindicator : terminated_by(",");
    ascii OrigCarrierSelectionInfo : terminated_by(",");
    ascii FinalTrunkGroupNumber : terminated_by(","),int(base10);
    ascii PINDigits : terminated_by(",");
    ascii AccountCode : terminated_by(",");
    ascii BillingNumber : terminated_by(",");
    ascii UniversalAccessNumber : terminated_by(",");
    ascii ReOriginatioinIndicator : terminated_by(",");//,int(base10);
    ascii RedirectionSwitchID : terminated_by(",");//,int(base10);
    ascii RouteAttemptnumber : terminated_by(",");//,int(base10);
    ascii RedirectionNumber : terminated_by(",");
    ascii RedirectionType : terminated_by(",");
    ascii RouteListIdentifier : terminated_by(",");//,int(base10);
    ascii TimeChangeIndicator : terminated_by(",");//,int(base10);
    ascii OrigSwitchID : terminated_by(",");//,int(base10);
    ascii OrigSwitchTrunkGroup : terminated_by(",");//,int(base10);
    ascii ANIprefix : terminated_by(",");
    ascii ANISuffix : terminated_by(",");
    ascii OrigSubGroupType : terminated_by(",");
    ascii TermSubGroupType : terminated_by(",");
    ascii AuthCode : terminated_by(",");
    ascii FAI : terminated_by(",");
    ascii LastSuccessRouteList : terminated_by(",");//,int(base10);
    ascii MeterPulseType : terminated_by(",");
    ascii PulseInterval : terminated_by(",");//,int(base10);
    ascii NumberOfPulses : terminated_by(",");//,int(base10);
    ascii ChargingMethod : terminated_by(",");
    ascii ChargeBand : terminated_by(",");//,int(base10);
    ascii MeterPulseRate : terminated_by(",");//,int(base10);
    ascii UnitsCharged : terminated_by(",");//,long(base10);
    ascii CallDuration : terminated_by(","),long(base10);
    ascii CallingSubscriberCategory : terminated_by(",");//,int(base10);
    ascii OrigTrunkGroupCLLI : terminated_by(",");
    ascii TermTrunkGroupCLLI : terminated_by(",");
    ascii BillType : terminated_by(",");//,int(base10);
    ascii BillTypeIndicator : terminated_by(",");//,int(base10);
    ascii OriginalCallID : terminated_by(",");
    ascii OriginalSwitchID : terminated_by(",");//,int(base10);
    ascii OrigGradeOfService : terminated_by(",");
    ascii OrigSessionStartTime : terminated_by(",");
    ascii OrigLocalControlPathIP : terminated_by(",");
    ascii OrigRemoteControlPublicIP : terminated_by(",");
    ascii OrigRemoteControlPrivateIP : terminated_by(",");
    ascii OrigRemoteUserID : terminated_by(",");
    ascii OrigLocalRTPIP : terminated_by(",");
    ascii OrigRemoteRTPIP : terminated_by(",");
    ascii OrigRemoteRTCPIP : terminated_by(",");
    ascii OrigSendingPayloadTypes : terminated_by(",");
    ascii OrigRTPPacketsSent : terminated_by(",");
    ascii OrigRTPOctetsSent : terminated_by(",");
    ascii OrigRTPPacketsReceived : terminated_by(",");
    ascii OrigRTPOctetsReceived : terminated_by(",");
    ascii OrigTransmitPacketsLost : terminated_by(",");
    ascii OrigTransmitPLPercentage : terminated_by(",");
    ascii OrigReceivingPacketsLost : terminated_by(",");
    ascii OrigReceivingPLPercentage : terminated_by(",");
    ascii OrigTransmitJitterMax : terminated_by(",");
    ascii OrigTransmitJitterMean : terminated_by(",");
    ascii OrigReceivingJitterMax : terminated_by(",");
    ascii OrigReceivingJitterMean : terminated_by(",");
    ascii OrigRoundTripTimeMax : terminated_by(",");
    ascii OrigRoundTripTimeMean : terminated_by(",");
    ascii TermGradeOfService : terminated_by(",");
    ascii TermSessionStartTime : terminated_by(",");
    ascii TermLocalControlPathIP : terminated_by(",");
    ascii TermRemoteControlPublicIP : terminated_by(",");
    ascii TermRemoteControlPrivateIP : terminated_by(",");
    ascii TermRemoteUserID : terminated_by(",");
    ascii TermLocalRTPIP : terminated_by(",");
    ascii TermRemoteRTPIP : terminated_by(",");
    ascii TermRemoteRTCPIP : terminated_by(",");
    ascii TermSendingPayloadTypes : terminated_by(",");
    ascii TermRTPPacketsSent : terminated_by(",");
    ascii TermRTPOctetsSent : terminated_by(",");
    ascii TermRTPPacketsReceived : terminated_by(",");
    ascii TermRTPOctetsReceived : terminated_by(",");
    ascii TermTransmitPacketsLost : terminated_by(",");
    ascii TermTransmitPLPercentage : terminated_by(",");
    ascii TermReceivingPacketsLost : terminated_by(",");
    ascii TermReceivingPLPercentage : terminated_by(",");
    ascii TermTransmitJitterMax : terminated_by(",");
    ascii TermTransmitJitterMean : terminated_by(",");
    ascii TermReceivingJitterMax : terminated_by(",");
    ascii TermReceivingJitterMean : terminated_by(",");
    ascii TermRoundTripTimeMax : terminated_by(",");
    ascii TermRoundTripTimeMean : terminated_by(",");
    ascii INAPServiceKey : terminated_by(",");
    ascii GAPNumber : terminated_by(",");
    ascii AMA_SLP_ID : terminated_by(",");
    ascii OTG : terminated_by(",");
    ascii DTG : terminated_by(",");
    ascii OrgLocNetworkPacketLossRate : terminated_by(",");
    ascii OrgLocJitterBuffDiscardRate : terminated_by(",");
    ascii OrgLocBurstLossDensity : terminated_by(",");
    ascii OrgLocGapLossDensity : terminated_by(",");
    ascii OrgLocBurstDuration : terminated_by(",");
    ascii OrgLocGapDuration : terminated_by(",");
    ascii OrgLocRTCPRoundTripDelay : terminated_by(",");
    ascii OrgLocEndSystemDelay : terminated_by(",");
    ascii OrgLocSignalLevel : terminated_by(",");
    ascii OrgLocNoiseLevel : terminated_by(",");
    ascii OrgLocResidualEchoRtnLoss : terminated_by(",");
    ascii OrgLocRFactor : terminated_by(",");
    ascii OrgLocExternalRFactor : terminated_by(",");
    ascii OrgLocEstimatedMOSLQ : terminated_by(",");
    ascii OrgLocEstimatedMOSCQ : terminated_by(",");
    ascii TrmLocNetworkPacketLossRate : terminated_by(",");
    ascii TrmLocJitterBuffDiscardRate : terminated_by(",");
    ascii TrmLocBurstLossDensity : terminated_by(",");
    ascii TrmLocGapLossDensity : terminated_by(",");
    ascii TrmLocBurstDuration : terminated_by(",");
    ascii TrmLocGapDuration : terminated_by(",");
    ascii TrmLocRTCPRoundTripDelay : terminated_by(",");
    ascii TrmLocEndSystemDelay : terminated_by(",");
    ascii TrmLocSignalLevel : terminated_by(",");
    ascii TrmLocNoiseLevel : terminated_by(",");
    ascii TrmLocResidualEchoRtnLoss : terminated_by(",");
    ascii TrmLocRFactor : terminated_by(",");
    ascii TrmLocExternalRFactor : terminated_by(",");
    ascii TrmLocEstimatedMOSLQ : terminated_by(",");
    ascii TrmLocEstimatedMOSCQ : terminated_by(",");
    ascii OrgRemNetworkPacketLossRate : terminated_by(",");
    ascii OrgRemJitterBuffDiscardRate : terminated_by(",");
    ascii OrgRemBurstLossDensity : terminated_by(",");
    ascii OrgRemGapLossDensity : terminated_by(",");
    ascii OrgRemBurstDuration : terminated_by(",");
    ascii OrgRemGapDuration : terminated_by(",");
    ascii OrgRemRTCPRoundTripDelay : terminated_by(",");
    ascii OrgRemEndSystemDelay : terminated_by(",");
    ascii OrgRemSignalLevel : terminated_by(",");
    ascii OrgRemNoiseLevel : terminated_by(",");
    ascii OrgRemResidualEchoRtnLoss : terminated_by(",");
    ascii OrgRemRFactor : terminated_by(",");
    ascii OrgRemExternalRFactor : terminated_by(",");
    ascii OrgRemEstimatedMOSLQ : terminated_by(",");
    ascii OrgRemEstimatedMOSCQ : terminated_by(",");
    ascii TrmRemNetworkPacketLossRate : terminated_by(",");
    ascii TrmRemJitterBuffDiscardRate : terminated_by(",");
    ascii TrmRemBurstLossDensity : terminated_by(",");
    ascii TrmRemGapLossDensity : terminated_by(",");
    ascii TrmRemBurstDuration : terminated_by(",");
    ascii TrmRemGapDuration : terminated_by(",");
    ascii TrmRemRTCPRoundTripDelay  : terminated_by(",");
    ascii TrmRemEndSystemDelay : terminated_by(",");
    ascii TrmRemSignalLevel : terminated_by(",");
    ascii TrmRemNoiseLevel : terminated_by(",");
    ascii TrmRemResidualEchoRtnLoss : terminated_by(",");
    ascii TrmRemRFactor : terminated_by(",");
    ascii TrmRemExternalRFactor : terminated_by(",");
    ascii TrmRemEstimatedMOSLQ : terminated_by(",");
    ascii TrmRemEstimatedMOSCQ : terminated_by(",");
    ascii FCIBilling : terminated_by(",");
    ascii OriginalCalledPartyNumber : terminated_by(",");
    ascii RoutingNetworkNumber : terminated_by(",");
    ascii OrigTrunkContext : terminated_by(",");
    ascii DestTrunkContext : terminated_by(",");
    ascii OrigRFCI : terminated_by(",");
    ascii OrigRFCISubflow1 : terminated_by(",");
    ascii OrigRFCISubflow2 : terminated_by(",");
    ascii OrigRFCISubflow3 : terminated_by(",");
    ascii OrigtrfoSuccess : terminated_by(",");
    ascii OrigtrfoFail : terminated_by(",");
    ascii OrigtrfoBreak : terminated_by(",");
    ascii TermRFCI : terminated_by(",");
    ascii TermRFCISubflow1 : terminated_by(",");
    ascii TermRFCISubflow2 : terminated_by(",");
    ascii TermRFCISubflow3 : terminated_by(",");
    ascii TermtrfoSuccess : terminated_by(",");
    ascii TermtrfoFail : terminated_by(",");
    ascii TermtrfoBreak : terminated_by(",");
    ascii PCVIcidValue : terminated_by(",");
    ascii PCVGenerate : terminated_by(",");
    ascii PCVOrigIOI : terminated_by(",");
    ascii PCVTermIOI : terminated_by(",");
    ascii IncomingALCEnabled : terminated_by(",");
    ascii OutgoingALCEnabled : terminated_by(",");
    ascii IncomingANREnabled : terminated_by(",");
    ascii OutgoingANREnabled : terminated_by(",");
    ascii PublicCallingIdentity : terminated_by(",");
    ascii OutgoingJIP : terminated_by(",");
    ascii IncomingCustomerGroup : terminated_by(",");
    ascii OutpulseCustomerGroup : terminated_by(",");
    ascii OrigVPN : terminated_by(",");
    ascii TermVPN : terminated_by(",");
    ascii FinalTrunkGroupMember : terminated_by(",");
    ascii SCPRouteIndex : terminated_by(",");
    ascii RedirectRouteIndex : terminated_by(",");
    ascii SwitchID : terminated_by(",");
    ascii SwitchIDTrunkGroupID : terminated_by(",");
    ascii QueryPseudoCIC : terminated_by(",");
    ascii CallingPartyNOA : terminated_by(","),int(base10);
    ascii SCPCauseCode : terminated_by(",");
    ascii OrigSIPCallID : terminated_by(",");
    ascii TermSIPCallID : terminated_by(",");
    ascii OrigISUPOPC : terminated_by(",");
    ascii TermISUPDPC : terminated_by(",");
    ascii OriginatingTGRP : terminated_by(0xA);
};

//VCDR ends

//Trailer part starts
external File_Trailer_Ext{

    CloseTime closeTime;
    SeqnumFirst seqnumFirst;
    SeqnumLast seqnumLast;
    RecordCount recordCount;
    ascii Checksum : terminated_by(0xA);
};

external CloseTime : identified_by(tag=="CLOSE_TIME") {
    ascii tag :  terminated_by("="), encode_value("CLOSE_TIME"), external_only;
    ascii value : terminated_by(0xA);
};


external SeqnumFirst : identified_by(tag=="SEQNUM_FIRST") {
    ascii tag :  terminated_by("="), encode_value("SEQNUM_FIRST"), external_only;
    ascii value : terminated_by(0xA);
};

external SeqnumLast : identified_by(tag=="SEQNUM_LAST") {
    ascii tag :  terminated_by("="), encode_value("SEQNUM_LAST"), external_only;
    ascii value : terminated_by(0xA);
};

external RecordCount : identified_by(tag=="RECORD_COUNT") {
    ascii tag :  terminated_by("="), encode_value("RECORD_COUNT"), external_only;
    ascii value : terminated_by(0xA);
};

//Trailer ends

in_map Header_inMap : external(File_Header_Ext), target_internal(file_header_TI), discard_output {automatic;};

decoder header_decoder : in_map(Header_inMap);

in_map Trailer_inMap : external(File_Trailer_Ext), target_internal(file_trailer_TI), discard_output {automatic;};

decoder trailer_decoder : in_map(Trailer_inMap);

//Final decoder n encoder for VCDR

in_map VCDR_im : external(VCDR), target_internal(VCDR_TI) {
    automatic : use_external_names;
};

out_map VCDR_om : external(VCDR), internal(VCDR_TI) {
    automatic;
};

decoder VCDR_Dec : in_map(VCDR_im);
encoder VCDR_Enc : out_map(VCDR_om);


//decoder VCDR_ASCII_Decoder : in_map(Header_inMap), in_map(VCDR_im), in_map(Trailer_inMap);

decoder VCDR_ASCII_Decoder {
decoder header_decoder *;
decoder VCDR_Dec *;
decoder trailer_decoder *;
};

//Decoding and encoding part of VCDR ends



//Intec record starts
external inContentFormat_GenBand {

    ascii incomingSwitch         : align(left), padded_with(0x20), static_size(20);
    ascii outgoingSwitch         : align(left), padded_with(0x20), static_size(20);
    ascii eventStartDate         : align(left), padded_with(0x20), static_size(8);
    ascii eventStartTime         : align(left), padded_with(0x20), static_size(8);
    ascii eventDuration          : align(right), padded_with("0"), static_size(10);
    ascii aNum                   : align(left), padded_with(0x20), static_size(28); //, int(base10);
    ascii bNum                   : align(left), padded_with(0x20), static_size(28); //, int(base10);
    ascii incomingTrunk          : align(left), padded_with(0x20), static_size(20);
    ascii outgoingTrunk          : align(left), padded_with(0x20), static_size(20);
    ascii incomingProduct        : align(left), padded_with(0x20), static_size(14); 
    ascii outgoingProduct        : align(left), padded_with(0x20), static_size(14);
    ascii eventDirection         : align(left), padded_with(0x20), static_size(1);
    ascii discreteRatingParam_1  : align(left), padded_with(0x20), static_size(15); 
    //ascii discreteRatingParam_2  : static_size(15);
    //ascii discreteRatingParam_3  : static_size(15);
    ascii dataUnit               : align(left), padded_with(0x20), static_size(8);
    ascii recSeqNum              : long(base10), align(left), padded_with(0x20), static_size(40);
    ascii recType                : align(left), padded_with(0x20), static_size(2); 
    ascii userSummarization      : align(left), padded_with(0x20), static_size(20);
    ascii userData               : align(left), padded_with(0x20), static_size(30);
    ascii userData_2             : align(left), padded_with(0x20), static_size(30);
    ascii linkField              : align(left), padded_with(0x20), static_size(2);// Added new field for Idenfication of splited record @Build 5    
    ascii userData_3             : align(left), padded_with(0x20), static_size(80); //Added for mapping ICID on 20170807
    ascii lineFeed               : terminated_by(0xA), external_only;
};




in_map contentGenBand_imap : external(inContentFormat_GenBand), target_internal(inContentFormatGenBand_TI){automatic;};

decoder inContentFormatGenBand_Dec : in_map(contentGenBand_imap);

out_map contentGenBand_OutMap : internal(inContentFormatGenBand_TI),external(inContentFormat_GenBand) { 
    automatic;
};

encoder contentGenBand_Enc : out_map(contentGenBand_OutMap);

//Intec record ends


//Internal CDR used for mapping and businessLogic
internal passInt {
    string eventDateTime;
    long eventDuration;
    string callingPartyNum;
    string calledPartyNum;
    string origTrunkGrpCLLI;
    string termTrunkGrpCLLI;
    int origTrunkGrp;
    int termTrunkGrp;
    string switchID;
    int noaCallingParty;
    int noaCalledParty;
    long longDurCallInd;
    long callId;
    long eventStartDateTime; //for duplicate record check
    string disconnectDateTime;
    int bearerCapability;
    string pointCode;
    int answerType;
    int orignMSF;
    int termMSF;
    int recordSeqNum;
    string longCallTime;
    string inRecordType; // added for audit framework.
    string outRecordType; // added for audit framework.
    int origLineOrTrunkType;
    int termLineOrTrunkType;
    date eventDate;
    string originatingTGRP;
    long dupEventStartDateTime; // added for new duplicate record check on 20160812
    string outplusedCallingNum; //Added field for capturing New field Outplused Calling Number 20170601
    string chargingIndicator;  //Added for mapping ICID on 20170807
    VCDR_Ext mgcfUdr;
};


//Session UDR for Aggregation
session genBand_LongCall {
    long totalCallDur;
    date origDateTime;
    boolean missingPartial;
    boolean startPartialReceived;
    boolean lastPartialReceived;
    map<date, date> timeMap;
    passInt udr;
};

//Session UDR for Aggregation
session genBand_LongCall_Cum {
    long totalCallDur;
    date origDateTime;
    boolean missingPartial;
    long lastPartialDuration;
    map<long, date> timeMap;
    passInt udr;
};
//Added for Spectrum @Build 0.5
/*
external inContentFormat_GenBand_Spectrum : identified_by (recordType == "MGCF_Record"){
    ascii recordType : terminated_by(",");
    ascii eventEndDate : terminated_by(",");
    ascii eventEndTime : terminated_by(",");
    inContentFormat_GenBand mgcfRecord;

};

in_map contentGenBand_imap_spectrum : external(inContentFormat_GenBand_Spectrum),  internal(errorTI), target_internal(inContentFormatGenBand_spectrum_TI){
    automatic  {
        inContentFormat_GenBand : using in_map contentGenBand_imap;
    };
};


decoder inContentFormatGenBand_sptrm_Dec : in_map(contentGenBand_imap_spectrum);

out_map contentGenBand_sptrm_OutMap : internal(inContentFormatGenBand_spectrum_TI),external(inContentFormat_GenBand_Spectrum) { 
    automatic;
};

encoder contentGenBand_sptrm_Enc : out_map(contentGenBand_sptrm_OutMap);
//Changes for Build 0.5 ends here.
*/

//Changes for NPO Server data by Abhinay 20150710
external NPO_Reporting {
    ascii OriginatingDateTime   : terminated_by(",");
    ascii AnswerDateTime        : terminated_by(",");
    ascii DisconnectDateTime    : terminated_by(",");
    ascii CallingPartyID        : terminated_by(",");
    ascii DialedNumber          : terminated_by(",");
    ascii CalledPartyID         : terminated_by(",");
    ascii TranslatedNumber      : terminated_by(",");
    ascii CallID                : terminated_by(","),long(base10);
    ascii InternalReleaseCause  : terminated_by(","),int(base10);
    ascii OrigSignalRelCause    : terminated_by(","),long(base10);
    ascii TermInternalRelCause  : terminated_by(","),int(base10);
    ascii TermSignalRelCause    : terminated_by(","),int(base10);
    ascii DisconnectDirection   : terminated_by(",");
    ascii OriginatingMG         : terminated_by(","),int(base10);
    ascii OriginatingChannel    : terminated_by(","),int(base10);
    ascii OrigTrunkGroup        : terminated_by(","),int(base10);
    ascii OrigTrunkGroupCircuitID : terminated_by(","),int(base10);
    ascii TermLineorTrunkType   : terminated_by(","),int(base10);
    ascii TerminatingMG         : terminated_by(","),int(base10);
    ascii TerminatingChannel    : terminated_by(","),int(base10);
    ascii TermTrunkGroup        : terminated_by(","),int(base10);
    ascii TermTrunkGroupCircuitID : terminated_by(","),int(base10);
    ascii CallTypeTollFree      : terminated_by(","),int(base10);
    ascii OriginationLATA       : terminated_by(","),int(base10);
    ascii CallerNumberPortedID  : terminated_by(",");
    ascii CalledNumberPortedID  : terminated_by(",");
    ascii OriginationLRN        : terminated_by(",");
    ascii OrigLRNSource         : terminated_by(",");
    ascii TerminationLRN        : terminated_by(",");
    ascii TermLRNSource         : terminated_by(",");
    ascii LNPDipIndication      : terminated_by(",");
    ascii OrigCountryCode       : terminated_by(","),int(base10);
    ascii CallDuration          : terminated_by(","),long(base10);
    ascii OrigTrunkGroupCLLI    : terminated_by(",");
    ascii TermTrunkGroupCLLI    : terminated_by(",");
    ascii OrigSIPCallID         : terminated_by(",");
    ascii TermSIPCallID         : terminated_by(",");
    ascii OriginatingTGRP       : terminated_by(0xA);
};

in_map NPO_Reporting_imap : external(NPO_Reporting), target_internal(NPO_Reporting_TI){automatic;};

decoder NPO_Reporting_Dec : in_map(NPO_Reporting_imap);

out_map NPO_Reporting_OutMap : internal(NPO_Reporting_TI),external(NPO_Reporting) { 
    automatic;
};

encoder NPO_Reporting_Enc : out_map(NPO_Reporting_OutMap);

internal SourceFileNm {
    string sourceFileName;    
};

//Intec ILDrecord starts
external ildContentFormat_GenBand {

    ascii incomingSwitch         : align(left), padded_with(0x20), static_size(20);
    ascii outgoingSwitch         : align(left), padded_with(0x20), static_size(20);
    ascii eventStartDate         : align(left), padded_with(0x20), static_size(8);
    ascii eventStartTime         : align(left), padded_with(0x20), static_size(8);
    ascii eventDuration          : align(right), padded_with("0"), static_size(10);
    ascii aNum                   : align(left), padded_with(0x20), static_size(28); //, int(base10);
    ascii bNum                   : align(left), padded_with(0x20), static_size(28); //, int(base10);
    ascii incomingTrunk          : align(left), padded_with(0x20), static_size(20);
    ascii outgoingTrunk          : align(left), padded_with(0x20), static_size(20);
    ascii incomingProduct        : align(left), padded_with(0x20), static_size(14); 
    ascii outgoingProduct        : align(left), padded_with(0x20), static_size(14);
    ascii eventDirection         : align(left), padded_with(0x20), static_size(1);
    ascii discreteRatingParam_1  : align(left), padded_with(0x20), static_size(15); 
    ascii dataUnit               : align(left), padded_with(0x20), static_size(8);
    ascii recSeqNum              : long(base10), align(left), padded_with(0x20), static_size(40);
    ascii recType                : align(left), padded_with(0x20), static_size(2); 
    ascii userSummarization      : align(left), padded_with(0x20), static_size(20);
    ascii userData               : align(left), padded_with(0x20), static_size(30);
    ascii userData_2             : align(left), padded_with(0x20), static_size(30);
    ascii linkField              : align(left), padded_with(0x20), static_size(2);// Added new field for Idenfication of splited record @Build 5  
    ascii inEventMappingCode     : align(left), padded_with(0x20), static_size(20); // Added new field 
    ascii outEventMappingCode    : align(left), padded_with(0x20), static_size(20); // Added new field
    ascii userData_3             : align(left), padded_with(0x20), static_size(80); //Added for mapping ICID on 20170807
    ascii lineFeed               : terminated_by(0xA), external_only;
}; 



in_map ildContentGenBand_imap : external(ildContentFormat_GenBand), target_internal(ildContentFormatGenBand_TI){automatic;};

decoder ildContentFormatGenBand_Dec : in_map(ildContentGenBand_imap);

out_map ildContentGenBand_OutMap : internal(ildContentFormatGenBand_TI),external(ildContentFormat_GenBand) { 
    automatic;
};

encoder ildContentGenBand_Enc : out_map(ildContentGenBand_OutMap);

//Number Normalization Rule 
internal NumNormalizationInt
{
    int numbOfDigitsToRemove;
    string prefixString;
    string stream;
    string normalizedNumber;
    boolean normalizationSucceded;
    
};

/******************BI Mapping for MGCF******************************************/

external BIExt{

    ascii CallingPartyNumber          : terminated_by(",");
    ascii CalledPartyNumber           : terminated_by(",");
    ascii OutpulseDigits              : terminated_by(",");
    ascii DialedNumber                : terminated_by(",");
    ascii DigitsDialed                : terminated_by(",");
    ascii Cnumber                     : terminated_by(",");
    ascii OriginalCalledNumber        : terminated_by(",");
    ascii OrigLineorTrunkType         : terminated_by(","),int(base10);
    ascii TermLineorTrunkType         : terminated_by(","),int(base10);
    ascii TermLRN                     : terminated_by(",");
    ascii CallStartDate               : terminated_by(",");
    ascii CallstartTime               : terminated_by(",");
    ascii CallEndDate                 : terminated_by(",");
    ascii CallEndTime                 : terminated_by(",");
    ascii CallDuration                : terminated_by(","),long(base10);
    ascii InTG                        : terminated_by(",");
    ascii OutTG                       : terminated_by(",");
    ascii PCVOrigIOI                  : terminated_by(",");
    ascii PCVTermIOI                  : terminated_by(",");
    ascii ICID                        : terminated_by(",");
    ascii InTGNumber                  : terminated_by(","),int(base10);
    ascii OutTGNumber                 : terminated_by(","),int(base10);
    ascii OrigSignalRelCause          : terminated_by(","),long(base10);
    ascii TermSignalRelCause          : terminated_by(","),int(base10);
    ascii OriginatingDateandTime      : terminated_by(",");
    ascii InternalReleaseCause        : terminated_by(","),int(base10);
    ascii DisconnectDirection         : terminated_by(",");
    ascii OriginatingMG               : terminated_by(","),int(base10);
    ascii TerminatingMG               : terminated_by(","),int(base10);
    ascii AnswerType                  : terminated_by(","),int(base10);
    ascii ORGREMRFACTOR               : terminated_by(",");
    ascii TRMRemRFACTOR               : terminated_by(",");
    ascii OrigTrunkGroupCircuitID     : terminated_by(","),int(base10);
    ascii TermTrunkGroupCircuitID     : terminated_by(","),int(base10);
    ascii OriginatingTGRP             : terminated_by(",");
    ascii OrigTransmitPlPercentage    : terminated_by(",");
    ascii OrigTransmitJitterMax       : terminated_by(",");
    ascii OrigTransmitJitterMean      : terminated_by(",");
    ascii TermTransmitPlPercentage    : terminated_by(",");
    ascii TermTransmitJitterMax       : terminated_by(",");
    ascii TermTransmitJitterMean      : terminated_by(",");
    ascii OrigReceivingPlPercentage   : terminated_by(",");
    ascii OrigReceivingJitterMax      : terminated_by(",");
    ascii OrigReceivingJitterMean     : terminated_by(",");
    ascii TermReceivingPlPercentage   : terminated_by(",");
    ascii TermReceivingJitterMax      : terminated_by(",");
    ascii TermReceivingJitterMean     : terminated_by(",");
    ascii CallType                    : terminated_by(0xA);
};
  
in_map BIGenBand_inmap : external(BIExt), target_internal(BI_TI){automatic;};

decoder BI_Dec : in_map(BIGenBand_inmap);

out_map BIGenBand_OutMap : internal(BI_TI),external(BIExt) { automatic;};

encoder BI_Enc : out_map(BIGenBand_OutMap);


//Added for BI header
external BI_Header_Ext{
    
    ascii Calling_Party_Number          : terminated_by(",");
    ascii Called_Party_Number           : terminated_by(",");
    ascii Outpulse_Digits               : terminated_by(",");
    ascii Dialed_Number                 : terminated_by(",");
    ascii Digits_Dialed                 : terminated_by(",");
    ascii Cnumber                       : terminated_by(",");
    ascii Original_Called_Number        : terminated_by(",");
    ascii Orig_Line_or_Trunk_Type       : terminated_by(",");
    ascii Term_Line_or_Trunk_Type       : terminated_by(",");
    ascii Term_LRN                      : terminated_by(",");
    ascii Call_Start_Date               : terminated_by(",");
    ascii Call_start_Time               : terminated_by(",");
    ascii Call_End_Date                 : terminated_by(",");
    ascii Call_End_Time                 : terminated_by(",");
    ascii Call_Duration                 : terminated_by(",");
    ascii In_TG                         : terminated_by(",");
    ascii Out_TG                        : terminated_by(",");
    ascii PCV_Orig_IOI                  : terminated_by(",");
    ascii PCV_Term_IOI                  : terminated_by(",");
    ascii ICID                          : terminated_by(",");
    ascii In_TG_Number                  : terminated_by(",");
    ascii Out_TG_Number                 : terminated_by(",");
    ascii Orig_Signal_Rel_Cause         : terminated_by(",");
    ascii Term_Signal_Rel_Cause         : terminated_by(",");
    ascii Originating_Date_and_Time     : terminated_by(",");
    ascii Internal_Release_Cause        : terminated_by(",");
    ascii Disconnect_Direction          : terminated_by(",");
    ascii Originating_MG                : terminated_by(",");
    ascii Terminating_MG                : terminated_by(",");
    ascii Answer_Type                   : terminated_by(",");
    ascii ORG_REM_R_FACTOR              : terminated_by(",");
    ascii TRM_Rem_R_FACTOR              : terminated_by(",");
    ascii Orig_Trunk_Group_Circuit_ID   : terminated_by(",");
    ascii Term_Trunk_Group_Circuit_ID   : terminated_by(",");
    ascii Originating_TGRP              : terminated_by(",");
    ascii Orig_Transmit_Pl_Percentage   : terminated_by(",");
    ascii Orig_Transmit_Jitter_Max      : terminated_by(",");
    ascii Orig_Transmit_Jitter_Mean     : terminated_by(",");
    ascii Term_Transmit_Pl_Percentage   : terminated_by(",");
    ascii Term_Transmit_Jitter_Max      : terminated_by(",");
    ascii Term_Transmit_Jitter_Mean     : terminated_by(",");
    ascii Orig_Receiving_Pl_Percentage  : terminated_by(",");
    ascii Orig_Receiving_Jitter_Max     : terminated_by(",");
    ascii Orig_Receiving_Jitter_Mean    : terminated_by(",");
    ascii Term_Receiving_Pl_Percentage  : terminated_by(",");
    ascii Term_Receiving_Jitter_Max     : terminated_by(",");
    ascii Term_Receiving_Jitter_Mean    : terminated_by(",");
    ascii Call_Type                     : terminated_by(0xA);   
};

in_map BI_header_inmap : external(BI_Header_Ext), target_internal(BI_header_TI), discard_output {automatic;};
decoder BI_header_dec : in_map(BI_header_inmap);

//decoder final_BI_Decoder : in_map(BI_header_inmap), in_map(BIGenBand_inmap);

decoder final_BI_Decoder {
decoder BI_header_dec;
decoder BI_Dec *;
};
]]></string>
   <boolean name="IsValid" value="true"/>
</exportmultiplex>
