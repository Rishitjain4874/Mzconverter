
external inContentFormat_GenBand {

    ascii incomingSwitch         : align(left), padded_with(0x20), static_size(20);
    ascii outgoingSwitch         : align(left), padded_with(0x20), static_size(20);
    ascii eventStartDate         : align(left), padded_with(0x20), static_size(8);
    ascii eventStartTime         : align(left), padded_with(0x20), static_size(8);
    ascii eventDuration          : align(right), padded_with("0"), static_size(10);
    ascii aNum                   : align(left), padded_with(0x20), static_size(28); //, int(base10);
    ascii bNum                   : align(left), padded_with(0x20), static_size(28); //, int(base10);
    ascii incomingTrunk          : align(left), padded_with(0x20), static_size(20);
    ascii outgoingTrunk          : align(left), padded_with(0x20), static_size(20);
    ascii incomingProduct        : align(left), padded_with(0x20), static_size(14); 
    ascii outgoingProduct        : align(left), padded_with(0x20), static_size(14);
    ascii eventDirection         : align(left), padded_with(0x20), static_size(1);
    ascii discreteRatingParam_1  : align(left), padded_with(0x20), static_size(15); 
    //ascii discreteRatingParam_2  : static_size(15);
    //ascii discreteRatingParam_3  : static_size(15);
    ascii dataUnit               : align(left), padded_with(0x20), static_size(8);
    ascii recSeqNum              : long(base10), align(left), padded_with(0x20), static_size(40);
    ascii recType                : align(left), padded_with(0x20), static_size(2); 
    ascii userSummarization      : align(left), padded_with(0x20), static_size(20);
    ascii userData               : align(left), padded_with(0x20), static_size(30);
    ascii userData_2             : align(left), padded_with(0x20), static_size(30);
    ascii linkField              : align(left), padded_with(0x20), static_size(2);// Added new field for Idenfication of splited record @Build 5    
    ascii userData_3             : align(left), padded_with(0x20), static_size(80); //Added for mapping ICID on 20170807
    ascii lineFeed               : terminated_by(0xA), external_only;
};




in_map contentGenBand_imap : external(inContentFormat_GenBand), target_internal(inContentFormatGenBand_TI){automatic;};

decoder inContentFormatGenBand_Dec : in_map(contentGenBand_imap);

out_map contentGenBand_OutMap : internal(inContentFormatGenBand_TI),external(inContentFormat_GenBand) { 
    automatic;
};

encoder contentGenBand_Enc : out_map(contentGenBand_OutMap);


external ildContentFormat_GenBand {

    ascii incomingSwitch         : align(left), padded_with(0x20), static_size(20);
    ascii outgoingSwitch         : align(left), padded_with(0x20), static_size(20);
    ascii eventStartDate         : align(left), padded_with(0x20), static_size(8);
    ascii eventStartTime         : align(left), padded_with(0x20), static_size(8);
    ascii eventDuration          : align(right), padded_with("0"), static_size(10);
    ascii aNum                   : align(left), padded_with(0x20), static_size(28); //, int(base10);
    ascii bNum                   : align(left), padded_with(0x20), static_size(28); //, int(base10);
    ascii incomingTrunk          : align(left), padded_with(0x20), static_size(20);
    ascii outgoingTrunk          : align(left), padded_with(0x20), static_size(20);
    ascii incomingProduct        : align(left), padded_with(0x20), static_size(14); 
    ascii outgoingProduct        : align(left), padded_with(0x20), static_size(14);
    ascii eventDirection         : align(left), padded_with(0x20), static_size(1);
    ascii discreteRatingParam_1  : align(left), padded_with(0x20), static_size(15); 
    ascii dataUnit               : align(left), padded_with(0x20), static_size(8);
    ascii recSeqNum              : long(base10), align(left), padded_with(0x20), static_size(40);
    ascii recType                : align(left), padded_with(0x20), static_size(2); 
    ascii userSummarization      : align(left), padded_with(0x20), static_size(20);
    ascii userData               : align(left), padded_with(0x20), static_size(30);
    ascii userData_2             : align(left), padded_with(0x20), static_size(30);
    ascii linkField              : align(left), padded_with(0x20), static_size(2);  
    ascii inEventMappingCode     : align(left), padded_with(0x20), static_size(20); 
    ascii outEventMappingCode    : align(left), padded_with(0x20), static_size(20); 
    ascii userData_3             : align(left), padded_with(0x20), static_size(80); 
    ascii lineFeed               : terminated_by(0xA), external_only;
}; 



in_map ildContentGenBand_imap : external(ildContentFormat_GenBand), target_internal(ildContentFormatGenBand_TI){automatic;};

decoder ildContentFormatGenBand_Dec : in_map(ildContentGenBand_imap);

out_map ildContentGenBand_OutMap : internal(ildContentFormatGenBand_TI),external(ildContentFormat_GenBand) { 
    automatic;
};

encoder ildContentGenBand_Enc : out_map(ildContentGenBand_OutMap);

//Number Normalization Rule 
internal NumNormalization 
{
    int numbOfDigitsToRemove;
    string prefixString;
    string stream;
    string normalizedNumber;
    boolean normalizationSucceded;
    
};

  
in_map BIGenBand_inmap : external(BIExt), target_internal(BI_TI){automatic;};

decoder BI_Dec : in_map(BIGenBand_inmap);

out_map BIGenBand_OutMap : internal(BI_TI),external(BIExt) { automatic;};

encoder BI_Enc : out_map(BIGenBand_OutMap);



in_map BI_header_inmap : external(BI_Header_Ext), target_internal(BI_header_TI), discard_output {automatic;};
decoder BI_header_dec : in_map(BI_header_inmap);

//decoder final_BI_Decoder : in_map(BI_header_inmap), in_map(BIGenBand_inmap);

decoder final_BI_Decoder {
decoder BI_header_dec;
decoder BI_Dec *;
};


internal SearchNode {
    int minLength;
    string regEx;
    map<string, SearchNode> NextNode;
    map<string, map<string,any>> colValues;
};
